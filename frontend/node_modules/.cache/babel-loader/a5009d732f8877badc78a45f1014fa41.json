{"ast":null,"code":"'use strict';\n\nconst sortLinks = require('./sortLinks');\n\nconst DAGLink = require('../dag-link/dagLink');\n/**\n * @typedef {import('./dagNode')} DAGNode\n * @typedef {import('../types')} DAGLinkLike\n */\n\n/**\n * @param {*} link\n * @returns {DAGLink}\n */\n\n\nconst asDAGLink = link => {\n  if (link instanceof DAGLink) {\n    // It's a DAGLink instance\n    // no need to do anything\n    return link;\n  } // DAGNode.isDagNode() would be more appropriate here, but it can't be used\n  // as it would lead to circular dependencies as `addLink` is called from\n  // within the DAGNode object.\n\n\n  if (!('cid' in link || 'hash' in link || 'Hash' in link || 'multihash' in link)) {\n    throw new Error('Link must be a DAGLink or DAGLink-like. Convert the DAGNode into a DAGLink via `node.toDAGLink()`.');\n  } // It's a Object with name, multihash/hash/cid and size\n  // @ts-ignore\n\n\n  return new DAGLink(link.Name || link.name, link.Tsize || link.size, link.Hash || link.multihash || link.hash || link.cid);\n};\n/**\n * @param {DAGNode} node\n * @param {DAGLink | DAGLinkLike} link\n */\n\n\nconst addLink = (node, link) => {\n  const dagLink = asDAGLink(link);\n  node.Links.push(dagLink);\n  sortLinks(node.Links);\n};\n\nmodule.exports = addLink;","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/node_modules/ipld-dag-pb/src/dag-node/addLink.js"],"names":["sortLinks","require","DAGLink","asDAGLink","link","Error","Name","name","Tsize","size","Hash","multihash","hash","cid","addLink","node","dagLink","Links","push","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,qBAAD,CAAvB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAME,SAAS,GAAIC,IAAD,IAAU;AAC1B,MAAIA,IAAI,YAAYF,OAApB,EAA6B;AAC3B;AACA;AACA,WAAOE,IAAP;AACD,GALyB,CAO1B;AACA;AACA;;;AACA,MAAI,EAAE,SAASA,IAAT,IACA,UAAUA,IADV,IAEA,UAAUA,IAFV,IAGA,eAAeA,IAHjB,CAAJ,EAG4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,oGAAV,CAAN;AACD,GAfyB,CAiB1B;AACA;;;AACA,SAAO,IAAIH,OAAJ,CAAYE,IAAI,CAACE,IAAL,IAAaF,IAAI,CAACG,IAA9B,EAAoCH,IAAI,CAACI,KAAL,IAAcJ,IAAI,CAACK,IAAvD,EAA6DL,IAAI,CAACM,IAAL,IAAaN,IAAI,CAACO,SAAlB,IAA+BP,IAAI,CAACQ,IAApC,IAA4CR,IAAI,CAACS,GAA9G,CAAP;AACD,CApBD;AAsBA;AACA;AACA;AACA;;;AACA,MAAMC,OAAO,GAAG,CAACC,IAAD,EAAOX,IAAP,KAAgB;AAC9B,QAAMY,OAAO,GAAGb,SAAS,CAACC,IAAD,CAAzB;AACAW,EAAAA,IAAI,CAACE,KAAL,CAAWC,IAAX,CAAgBF,OAAhB;AACAhB,EAAAA,SAAS,CAACe,IAAI,CAACE,KAAN,CAAT;AACD,CAJD;;AAMAE,MAAM,CAACC,OAAP,GAAiBN,OAAjB","sourcesContent":["'use strict'\n\nconst sortLinks = require('./sortLinks')\nconst DAGLink = require('../dag-link/dagLink')\n\n/**\n * @typedef {import('./dagNode')} DAGNode\n * @typedef {import('../types')} DAGLinkLike\n */\n\n/**\n * @param {*} link\n * @returns {DAGLink}\n */\nconst asDAGLink = (link) => {\n  if (link instanceof DAGLink) {\n    // It's a DAGLink instance\n    // no need to do anything\n    return link\n  }\n\n  // DAGNode.isDagNode() would be more appropriate here, but it can't be used\n  // as it would lead to circular dependencies as `addLink` is called from\n  // within the DAGNode object.\n  if (!('cid' in link ||\n        'hash' in link ||\n        'Hash' in link ||\n        'multihash' in link)) {\n    throw new Error('Link must be a DAGLink or DAGLink-like. Convert the DAGNode into a DAGLink via `node.toDAGLink()`.')\n  }\n\n  // It's a Object with name, multihash/hash/cid and size\n  // @ts-ignore\n  return new DAGLink(link.Name || link.name, link.Tsize || link.size, link.Hash || link.multihash || link.hash || link.cid)\n}\n\n/**\n * @param {DAGNode} node\n * @param {DAGLink | DAGLinkLike} link\n */\nconst addLink = (node, link) => {\n  const dagLink = asDAGLink(link)\n  node.Links.push(dagLink)\n  sortLinks(node.Links)\n}\n\nmodule.exports = addLink\n"]},"metadata":{},"sourceType":"script"}