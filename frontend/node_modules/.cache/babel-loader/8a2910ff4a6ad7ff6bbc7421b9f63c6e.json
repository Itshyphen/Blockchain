{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst util = require('./util');\n/**\n * Resolves a path within a PB block.\n *\n * If the path resolves half-way to a link, then the `remainderPath` is the part\n * after the link that can be used for further resolving\n *\n * Returns the value or a link and the partial missing path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n * @param {string} [path='/'] - Path that should be resolved\n */\n\n\nexports.resolve = (binaryBlob, path = '/') => {\n  let node = util.deserialize(binaryBlob);\n  const parts = path.split('/').filter(Boolean);\n\n  while (parts.length) {\n    const key = parts.shift(); // @ts-ignore\n\n    if (node[key] === undefined) {\n      // There might be a matching named link\n      for (const link of node.Links) {\n        if (link.Name === key) {\n          return {\n            value: link.Hash,\n            remainderPath: parts.join('/')\n          };\n        }\n      } // There wasn't even a matching named link\n\n\n      throw new Error(`Object has no property '${key}'`);\n    } // @ts-ignore\n\n\n    node = node[key];\n\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      };\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  };\n};\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n * @yields {string} - A single path\n */\n\n\nexports.tree = function* (binaryBlob) {\n  const node = util.deserialize(binaryBlob); // There is always a `Data` and `Links` property\n\n  yield 'Data';\n  yield 'Links';\n\n  for (let ii = 0; ii < node.Links.length; ii++) {\n    yield `Links/${ii}`;\n    yield `Links/${ii}/Name`;\n    yield `Links/${ii}/Tsize`;\n    yield `Links/${ii}/Hash`;\n  }\n};","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/node_modules/ipld-dag-pb/src/resolver.js"],"names":["CID","require","util","exports","resolve","binaryBlob","path","node","deserialize","parts","split","filter","Boolean","length","key","shift","undefined","link","Links","Name","value","Hash","remainderPath","join","Error","isCID","tree","ii"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACC,OAAR,GAAkB,CAACC,UAAD,EAAaC,IAAI,GAAG,GAApB,KAA4B;AAC5C,MAAIC,IAAI,GAAGL,IAAI,CAACM,WAAL,CAAiBH,UAAjB,CAAX;AAEA,QAAMI,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,OAAvB,CAAd;;AACA,SAAOH,KAAK,CAACI,MAAb,EAAqB;AACnB,UAAMC,GAAG,GAAGL,KAAK,CAACM,KAAN,EAAZ,CADmB,CAEnB;;AACA,QAAIR,IAAI,CAACO,GAAD,CAAJ,KAAcE,SAAlB,EAA6B;AAC3B;AACA,WAAK,MAAMC,IAAX,IAAmBV,IAAI,CAACW,KAAxB,EAA+B;AAC7B,YAAID,IAAI,CAACE,IAAL,KAAcL,GAAlB,EAAuB;AACrB,iBAAO;AACLM,YAAAA,KAAK,EAAEH,IAAI,CAACI,IADP;AAELC,YAAAA,aAAa,EAAEb,KAAK,CAACc,IAAN,CAAW,GAAX;AAFV,WAAP;AAID;AACF,OAT0B,CAW3B;;;AACA,YAAM,IAAIC,KAAJ,CAAW,2BAA0BV,GAAI,GAAzC,CAAN;AACD,KAhBkB,CAkBnB;;;AACAP,IAAAA,IAAI,GAAGA,IAAI,CAACO,GAAD,CAAX;;AACA,QAAId,GAAG,CAACyB,KAAJ,CAAUlB,IAAV,CAAJ,EAAqB;AACnB,aAAO;AACLa,QAAAA,KAAK,EAAEb,IADF;AAELe,QAAAA,aAAa,EAAEb,KAAK,CAACc,IAAN,CAAW,GAAX;AAFV,OAAP;AAID;AACF;;AAED,SAAO;AACLH,IAAAA,KAAK,EAAEb,IADF;AAELe,IAAAA,aAAa,EAAE;AAFV,GAAP;AAID,CApCD;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,OAAO,CAACuB,IAAR,GAAe,WAAYrB,UAAZ,EAAwB;AACrC,QAAME,IAAI,GAAGL,IAAI,CAACM,WAAL,CAAiBH,UAAjB,CAAb,CADqC,CAGrC;;AACA,QAAM,MAAN;AACA,QAAM,OAAN;;AACA,OAAK,IAAIsB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGpB,IAAI,CAACW,KAAL,CAAWL,MAAjC,EAAyCc,EAAE,EAA3C,EAA+C;AAC7C,UAAO,SAAQA,EAAG,EAAlB;AACA,UAAO,SAAQA,EAAG,OAAlB;AACA,UAAO,SAAQA,EAAG,QAAlB;AACA,UAAO,SAAQA,EAAG,OAAlB;AACD;AACF,CAZD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\n\nconst util = require('./util')\n\n/**\n * Resolves a path within a PB block.\n *\n * If the path resolves half-way to a link, then the `remainderPath` is the part\n * after the link that can be used for further resolving\n *\n * Returns the value or a link and the partial missing path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n * @param {string} [path='/'] - Path that should be resolved\n */\nexports.resolve = (binaryBlob, path = '/') => {\n  let node = util.deserialize(binaryBlob)\n\n  const parts = path.split('/').filter(Boolean)\n  while (parts.length) {\n    const key = parts.shift()\n    // @ts-ignore\n    if (node[key] === undefined) {\n      // There might be a matching named link\n      for (const link of node.Links) {\n        if (link.Name === key) {\n          return {\n            value: link.Hash,\n            remainderPath: parts.join('/')\n          }\n        }\n      }\n\n      // There wasn't even a matching named link\n      throw new Error(`Object has no property '${key}'`)\n    }\n\n    // @ts-ignore\n    node = node[key]\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      }\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  }\n}\n\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n * @yields {string} - A single path\n */\nexports.tree = function * (binaryBlob) {\n  const node = util.deserialize(binaryBlob)\n\n  // There is always a `Data` and `Links` property\n  yield 'Data'\n  yield 'Links'\n  for (let ii = 0; ii < node.Links.length; ii++) {\n    yield `Links/${ii}`\n    yield `Links/${ii}/Name`\n    yield `Links/${ii}/Tsize`\n    yield `Links/${ii}/Hash`\n  }\n}\n"]},"metadata":{},"sourceType":"script"}