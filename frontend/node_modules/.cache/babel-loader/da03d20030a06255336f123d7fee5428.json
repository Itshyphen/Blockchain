{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst util = require('./util');\n/**\n * Resolves a path within a CBOR block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Uint8Array} binaryBlob - Binary representation of a CBOR block\n * @param {string} [path='/'] - Path that should be resolved\n */\n\n\nexports.resolve = (binaryBlob, path = '') => {\n  let node = util.deserialize(binaryBlob);\n  const parts = path.split('/').filter(Boolean);\n\n  while (parts.length) {\n    const key = parts.shift();\n\n    if (!key || !(key in node)) {\n      throw new Error(`Object has no property '${key}'`);\n    }\n\n    node = node[key];\n\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      };\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  };\n};\n/**\n * @param {any} node\n * @param {string} [path]\n * @returns {Generator<string, void, undefined>}\n */\n\n\nconst traverse = function* (node, path) {\n  // Traverse only objects and arrays\n  if (node instanceof Uint8Array || CID.isCID(node) || typeof node === 'string' || node === null) {\n    return;\n  }\n\n  for (const item of Object.keys(node)) {\n    const nextpath = path === undefined ? item : path + '/' + item;\n    yield nextpath;\n    yield* traverse(node[item], nextpath);\n  } // to stop eslint and tsc fighting\n\n\n  return undefined;\n};\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Uint8Array} binaryBlob - Binary representation of a CBOR block\n * @yields {string} - A single path\n */\n\n\nexports.tree = function* (binaryBlob) {\n  const node = util.deserialize(binaryBlob);\n  yield* traverse(node);\n};","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/node_modules/ipld-dag-cbor/src/resolver.js"],"names":["CID","require","util","exports","resolve","binaryBlob","path","node","deserialize","parts","split","filter","Boolean","length","key","shift","Error","isCID","value","remainderPath","join","traverse","Uint8Array","item","Object","keys","nextpath","undefined","tree"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACC,OAAR,GAAkB,CAACC,UAAD,EAAaC,IAAI,GAAG,EAApB,KAA2B;AAC3C,MAAIC,IAAI,GAAGL,IAAI,CAACM,WAAL,CAAiBH,UAAjB,CAAX;AAEA,QAAMI,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,OAAvB,CAAd;;AACA,SAAOH,KAAK,CAACI,MAAb,EAAqB;AACnB,UAAMC,GAAG,GAAGL,KAAK,CAACM,KAAN,EAAZ;;AACA,QAAI,CAACD,GAAD,IAAQ,EAAEA,GAAG,IAAIP,IAAT,CAAZ,EAA4B;AAC1B,YAAM,IAAIS,KAAJ,CAAW,2BAA0BF,GAAI,GAAzC,CAAN;AACD;;AAEDP,IAAAA,IAAI,GAAGA,IAAI,CAACO,GAAD,CAAX;;AACA,QAAId,GAAG,CAACiB,KAAJ,CAAUV,IAAV,CAAJ,EAAqB;AACnB,aAAO;AACLW,QAAAA,KAAK,EAAEX,IADF;AAELY,QAAAA,aAAa,EAAEV,KAAK,CAACW,IAAN,CAAW,GAAX;AAFV,OAAP;AAID;AACF;;AAED,SAAO;AACLF,IAAAA,KAAK,EAAEX,IADF;AAELY,IAAAA,aAAa,EAAE;AAFV,GAAP;AAID,CAvBD;AAyBA;AACA;AACA;AACA;AACA;;;AACA,MAAME,QAAQ,GAAG,WAAYd,IAAZ,EAAkBD,IAAlB,EAAwB;AACvC;AACA,MAAIC,IAAI,YAAYe,UAAhB,IAA8BtB,GAAG,CAACiB,KAAJ,CAAUV,IAAV,CAA9B,IAAiD,OAAOA,IAAP,KAAgB,QAAjE,IAA6EA,IAAI,KAAK,IAA1F,EAAgG;AAC9F;AACD;;AAED,OAAK,MAAMgB,IAAX,IAAmBC,MAAM,CAACC,IAAP,CAAYlB,IAAZ,CAAnB,EAAsC;AACpC,UAAMmB,QAAQ,GAAGpB,IAAI,KAAKqB,SAAT,GAAqBJ,IAArB,GAA4BjB,IAAI,GAAG,GAAP,GAAaiB,IAA1D;AACA,UAAMG,QAAN;AACA,WAAQL,QAAQ,CAACd,IAAI,CAACgB,IAAD,CAAL,EAAaG,QAAb,CAAhB;AACD,GAVsC,CAYvC;;;AACA,SAAOC,SAAP;AACD,CAdD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAxB,OAAO,CAACyB,IAAR,GAAe,WAAYvB,UAAZ,EAAwB;AACrC,QAAME,IAAI,GAAGL,IAAI,CAACM,WAAL,CAAiBH,UAAjB,CAAb;AAEA,SAAQgB,QAAQ,CAACd,IAAD,CAAhB;AACD,CAJD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst util = require('./util')\n\n/**\n * Resolves a path within a CBOR block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Uint8Array} binaryBlob - Binary representation of a CBOR block\n * @param {string} [path='/'] - Path that should be resolved\n */\nexports.resolve = (binaryBlob, path = '') => {\n  let node = util.deserialize(binaryBlob)\n\n  const parts = path.split('/').filter(Boolean)\n  while (parts.length) {\n    const key = parts.shift()\n    if (!key || !(key in node)) {\n      throw new Error(`Object has no property '${key}'`)\n    }\n\n    node = node[key]\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      }\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  }\n}\n\n/**\n * @param {any} node\n * @param {string} [path]\n * @returns {Generator<string, void, undefined>}\n */\nconst traverse = function * (node, path) {\n  // Traverse only objects and arrays\n  if (node instanceof Uint8Array || CID.isCID(node) || typeof node === 'string' || node === null) {\n    return\n  }\n\n  for (const item of Object.keys(node)) {\n    const nextpath = path === undefined ? item : path + '/' + item\n    yield nextpath\n    yield * traverse(node[item], nextpath)\n  }\n\n  // to stop eslint and tsc fighting\n  return undefined\n}\n\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Uint8Array} binaryBlob - Binary representation of a CBOR block\n * @yields {string} - A single path\n */\nexports.tree = function * (binaryBlob) {\n  const node = util.deserialize(binaryBlob)\n\n  yield * traverse(node)\n}\n"]},"metadata":{},"sourceType":"script"}