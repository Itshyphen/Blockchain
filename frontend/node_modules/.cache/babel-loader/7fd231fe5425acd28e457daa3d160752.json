{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst {\n  DAGLink\n} = require('ipld-dag-pb');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"links\"]}\n   */\n  async function links(cid, options = {}) {\n    const res = await api.post('object/links', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return (data.Links || []).map((\n    /** @type {any} */\n    l) => new DAGLink(l.Name, l.Size, l.Hash));\n  }\n\n  return links;\n});","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/src/object/links.js"],"names":["CID","require","DAGLink","configure","toUrlSearchParams","module","exports","api","links","cid","options","res","post","timeout","signal","searchParams","arg","Uint8Array","headers","data","json","Links","map","l","Name","Size","Hash"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,KAAf,CAAsBC,GAAtB,EAA2BC,OAAO,GAAG,EAArC,EAAyC;AACvC,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,cAAT,EAAyB;AACzCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADwB;AAEzCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFyB;AAGzCC,MAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,QAAAA,GAAG,EAAG,GAAEP,GAAG,YAAYQ,UAAf,GAA4B,IAAIjB,GAAJ,CAAQS,GAAR,CAA5B,GAA2CA,GAAI,EADzB;AAE9B,WAAGC;AAF2B,OAAD,CAHU;AAOzCQ,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAPwB,KAAzB,CAAlB;AASA,UAAMC,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAJ,EAAnB;AAEA,WAAO,CAACD,IAAI,CAACE,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuB;AAAC;AAAmBC,IAAAA,CAApB,KAA0B,IAAIrB,OAAJ,CAAYqB,CAAC,CAACC,IAAd,EAAoBD,CAAC,CAACE,IAAtB,EAA4BF,CAAC,CAACG,IAA9B,CAAjD,CAAP;AACD;;AACD,SAAOlB,KAAP;AACD,CAnByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { DAGLink } = require('ipld-dag-pb')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const res = await api.post('object/links', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Links || []).map((/** @type {any} */ l) => new DAGLink(l.Name, l.Size, l.Hash))\n  }\n  return links\n})\n"]},"metadata":{},"sourceType":"script"}