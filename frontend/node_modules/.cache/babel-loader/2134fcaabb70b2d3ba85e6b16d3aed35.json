{"ast":null,"code":"var _jsxFileName = \"/home/ranju/location/meDossier/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { Switch, Route, Router } from \"react-router-dom\";\nimport Register from './pages/home';\nimport Contract from \"./contracts/Medossier.json\";\nimport getWeb3 from './getWeb3';\nimport history from './pages/history';\nimport Patient from './pages/patients_dashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [contract, setContract] = useState({});\n  const [patient, setPatient] = useState([]);\n  const [records, setRecords] = useState([]);\n\n  const getWeb3Data = async () => {\n    try {\n      //obtain web3 from getWeb3\n      const web3 = await getWeb3(); //obtain the accounts\n\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts); //obtain netwrokID\n\n      const netwrokID = await web3.eth.net.getId();\n      console.log(netwrokID);\n      const networkdeployed = Contract.networks[netwrokID];\n      console.log(networkdeployed);\n      const instance = await new web3.eth.Contract(Contract.abi, networkdeployed && networkdeployed.address);\n      setCurrentAccount(accounts[0]);\n      setContract({ ...instance\n      }); //Just to confirm working of addPatient and addDoctor function \n      //  const patient = await instance.methods.getPatientDetails(accounts[0]).call();\n      //  console.log(patient);\n      //  const doctor = await instance.methods.getDoctorByAddress(accounts[0]).call();\n      //  console.log(doctor);\n      // const recordlength =  await instance.methods.getrecordlist(accounts[0]).call();\n      // console.log(recordlength)\n      //   const recordlist =[];\n      //   for (const i =1 ;i<= recordlength; i++){\n      //     const record = await  instance.methods.getPatientRecords(accounts[0],i).call();\n      //     recordlist.push(record);\n      //     console.log(recordlist);\n      //   }\n      //   setRecords(recordlist);\n    } catch (error) {\n      alert(\"Cannot load web3 ,contract. Consult console for details\");\n      console.log(error);\n    }\n  }; //Register Patient\n\n\n  const patientRegister = async (name, phone, gender, dob, blood) => {\n    try {\n      console.log(name, phone, gender, dob, blood);\n      console.log(currentAccount);\n      contract.methods.addPatient(name, phone, gender, dob, blood).send({\n        from: currentAccount\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Register/Add Doctor\n\n\n  const doctorRegister = async (name, hname, contact, faculty) => {\n    try {\n      console.log(name, contact, faculty);\n      contract.methods.addDoctor(name, hname, contact, faculty).send({\n        from: currentAccount\n      });\n      await getWeb3Data();\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Handle  patient Login\n\n\n  const phandlelogin = async () => {\n    try {\n      console.log(\"sucess\");\n      const patient = await contract.methods.getPatientDetails(currentAccount).call();\n      setPatient(patient);\n      console.log(patient); // if(patient.length!==0){\n\n      getPatientRecord();\n      history.push('/patient'); // }\n    } catch (error) {\n      console.error(error); // alert(error)\n\n      alert(\"No records found\");\n    }\n  }; //Patient grant Access to doctor\n\n\n  const grantAccess = async doctor => {\n    try {\n      contract.methods.grantAccess(doctor).send({\n        from: currentAccount\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }; //Patient revoke access from doctor\n\n\n  const revokeAccess = async doctor => {\n    try {\n      contract.methods.revoke_access(doctor).send({\n        from: currentAccount\n      });\n    } catch (error) {\n      console.error(error);\n      alert(error);\n    }\n  }; //Get Patient details by patient\n\n\n  const getPatientRecord = async () => {\n    try {\n      const recordlength = await contract.methods.getrecordlist(currentAccount).call();\n      const recordlist = [];\n\n      for (let i = 0; i < recordlength; i++) {\n        const record = await contract.methods.getPatientRecords(currentAccount, i).call();\n        console.log(record);\n        recordlist.push(record);\n      }\n\n      setRecords(recordlist);\n      console.log(records);\n    } catch (error) {\n      alert(error);\n    }\n  }; //Handle Doctor Login\n\n\n  const dhandlelogin = async () => {\n    try {\n      console.log(\"doctor\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getWeb3Data();\n  }, []);\n  return (\n    /*#__PURE__*/\n    // <div className =\"Main\">\n    _jsxDEV(Router, {\n      history: history,\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          children: /*#__PURE__*/_jsxDEV(Register, {\n            patientRegister: patientRegister,\n            doctorRegister: doctorRegister,\n            phandlelogin: phandlelogin,\n            dhandlelogin: dhandlelogin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/patient\",\n          children: /*#__PURE__*/_jsxDEV(Patient, {\n            patient: patient,\n            grantAccess: grantAccess,\n            revokeAccess: revokeAccess,\n            contract: contract,\n            currentAccount: currentAccount,\n            getPatientRecord: getPatientRecord,\n            records: records\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this) // </div>\n\n  );\n}\n\n_s(App, \"WunSFCdhRe5XYaljMnuYcBzszh8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/src/App.js"],"names":["React","useState","useEffect","Switch","Route","Router","Register","Contract","getWeb3","history","Patient","App","currentAccount","setCurrentAccount","contract","setContract","patient","setPatient","records","setRecords","getWeb3Data","web3","accounts","eth","getAccounts","console","log","netwrokID","net","getId","networkdeployed","networks","instance","abi","address","error","alert","patientRegister","name","phone","gender","dob","blood","methods","addPatient","send","from","doctorRegister","hname","contact","faculty","addDoctor","phandlelogin","getPatientDetails","call","getPatientRecord","push","grantAccess","doctor","revokeAccess","revoke_access","recordlength","getrecordlist","recordlist","i","record","getPatientRecords","dhandlelogin"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,MAAxB,QAAqC,kBAArC;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,OAAP,MAAoB,4BAApB;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACd,QAAK,CAACC,cAAD,EAAgBC,iBAAhB,IAAoCZ,QAAQ,CAAC,EAAD,CAAjD;AACA,QAAK,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAK,CAACe,OAAD,EAASC,UAAT,IAAuBhB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAK,CAACiB,OAAD,EAASC,UAAT,IAAuBlB,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMmB,WAAW,GAAG,YAAS;AAC3B,QAAG;AACD;AACA,YAAMC,IAAI,GAAG,MAAMb,OAAO,EAA1B,CAFC,CAGD;;AACA,YAAMc,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EALC,CAMD;;AACA,YAAMK,SAAS,GAAG,MAAMN,IAAI,CAACE,GAAL,CAASK,GAAT,CAAaC,KAAb,EAAxB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AACA,YAAMG,eAAe,GAAGvB,QAAQ,CAACwB,QAAT,CAAkBJ,SAAlB,CAAxB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYI,eAAZ;AACA,YAAME,QAAQ,GAAG,MAAM,IAAIX,IAAI,CAACE,GAAL,CAAShB,QAAb,CAAsBA,QAAQ,CAAC0B,GAA/B,EAAmCH,eAAe,IAAIA,eAAe,CAACI,OAAtE,CAAvB;AACArB,MAAAA,iBAAiB,CAACS,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACAP,MAAAA,WAAW,CAAC,EAAC,GAAGiB;AAAJ,OAAD,CAAX,CAbC,CAcD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,KA7BD,CA8BA,OAAMG,KAAN,EAAY;AACVC,MAAAA,KAAK,CAAC,yDAAD,CAAL;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACD;AACF,GAnCD,CANc,CA0Cb;;;AACA,QAAME,eAAe,GAAG,OAAMC,IAAN,EAAWC,KAAX,EAAiBC,MAAjB,EAAwBC,GAAxB,EAA4BC,KAA5B,KAAoC;AAC1D,QAAG;AACDjB,MAAAA,OAAO,CAACC,GAAR,CAAYY,IAAZ,EAAiBC,KAAjB,EAAuBC,MAAvB,EAA8BC,GAA9B,EAAkCC,KAAlC;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAYd,cAAZ;AACAE,MAAAA,QAAQ,CAAC6B,OAAT,CAAiBC,UAAjB,CAA4BN,IAA5B,EAAiCC,KAAjC,EAAuCC,MAAvC,EAA8CC,GAA9C,EAAkDC,KAAlD,EAAyDG,IAAzD,CAA8D;AAACC,QAAAA,IAAI,EAAClC;AAAN,OAA9D;AACD,KAJD,CAKA,OAAMuB,KAAN,EAAY;AACVV,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACD;AACF,GATD,CA3Ca,CAqDb;;;AACA,QAAMY,cAAc,GAAG,OAAMT,IAAN,EAAWU,KAAX,EAAiBC,OAAjB,EAAyBC,OAAzB,KAAmC;AACxD,QAAG;AACDzB,MAAAA,OAAO,CAACC,GAAR,CAAYY,IAAZ,EAAiBW,OAAjB,EAAyBC,OAAzB;AACApC,MAAAA,QAAQ,CAAC6B,OAAT,CAAiBQ,SAAjB,CAA2Bb,IAA3B,EAAgCU,KAAhC,EAAsCC,OAAtC,EAA8CC,OAA9C,EAAuDL,IAAvD,CAA4D;AAACC,QAAAA,IAAI,EAAClC;AAAN,OAA5D;AACA,YAAMQ,WAAW,EAAjB;AAED,KALD,CAMJ,OAAMe,KAAN,EAAY;AACVV,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACD;AACE,GAVD,CAtDa,CAiEb;;;AACA,QAAMiB,YAAY,GAAG,YAAS;AAC5B,QAAG;AACD3B,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,YAAMV,OAAO,GAAG,MAAMF,QAAQ,CAAC6B,OAAT,CAAiBU,iBAAjB,CAAmCzC,cAAnC,EAAmD0C,IAAnD,EAAtB;AACArC,MAAAA,UAAU,CAACD,OAAD,CAAV;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ,EAJC,CAKD;;AACEuC,MAAAA,gBAAgB;AAEhB9C,MAAAA,OAAO,CAAC+C,IAAR,CAAa,UAAb,EARD,CASD;AAED,KAXD,CAYA,OAAMrB,KAAN,EAAY;AACVV,MAAAA,OAAO,CAACU,KAAR,CAAcA,KAAd,EADU,CAEV;;AACAC,MAAAA,KAAK,CAAC,kBAAD,CAAL;AACD;AACF,GAlBD,CAlEa,CAqFf;;;AACE,QAAMqB,WAAW,GAAG,MAAMC,MAAN,IAAe;AACjC,QAAG;AACA5C,MAAAA,QAAQ,CAAC6B,OAAT,CAAiBc,WAAjB,CAA6BC,MAA7B,EAAqCb,IAArC,CAA0C;AAACC,QAAAA,IAAI,EAAClC;AAAN,OAA1C;AACF,KAFD,CAGA,OAAMuB,KAAN,EAAY;AACVV,MAAAA,OAAO,CAACU,KAAR,CAAcA,KAAd;AACD;AACF,GAPD,CAtFa,CA8Fb;;;AACA,QAAMwB,YAAY,GAAG,MAAMD,MAAN,IAAe;AAClC,QAAG;AACD5C,MAAAA,QAAQ,CAAC6B,OAAT,CAAiBiB,aAAjB,CAA+BF,MAA/B,EAAuCb,IAAvC,CAA4C;AAACC,QAAAA,IAAI,EAAClC;AAAN,OAA5C;AACD,KAFD,CAGA,OAAMuB,KAAN,EAAY;AACVV,MAAAA,OAAO,CAACU,KAAR,CAAcA,KAAd;AACAC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,GARD,CA/Fa,CAwGf;;;AACE,QAAMoB,gBAAgB,GAAG,YAAS;AAChC,QAAG;AACD,YAAMM,YAAY,GAAI,MAAM/C,QAAQ,CAAC6B,OAAT,CAAiBmB,aAAjB,CAA+BlD,cAA/B,EAA+C0C,IAA/C,EAA5B;AACA,YAAMS,UAAU,GAAE,EAAlB;;AACA,WAAK,IAAIC,CAAC,GAAE,CAAZ,EAAeA,CAAC,GAAEH,YAAlB,EAAgCG,CAAC,EAAjC,EAAoC;AAClC,cAAMC,MAAM,GAAG,MAAOnD,QAAQ,CAAC6B,OAAT,CAAiBuB,iBAAjB,CAAmCtD,cAAnC,EAAkDoD,CAAlD,EAAqDV,IAArD,EAAtB;AACA7B,QAAAA,OAAO,CAACC,GAAR,CAAYuC,MAAZ;AAEAF,QAAAA,UAAU,CAACP,IAAX,CAAgBS,MAAhB;AACD;;AACD9C,MAAAA,UAAU,CAAC4C,UAAD,CAAV;AACAtC,MAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ;AAED,KAZD,CAaA,OAAMiB,KAAN,EAAY;AACXC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACA;AACF,GAjBD,CAzGa,CA4Hb;;;AACA,QAAMgC,YAAY,GAAG,YAAS;AAC5B,QAAG;AACD1C,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,KAFD,CAGA,OAAMS,KAAN,EAAY;AACVV,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACD;AACF,GAPD;;AAQAjC,EAAAA,SAAS,CAAC,MAAI;AACZkB,IAAAA,WAAW;AACZ,GAFQ,EAEP,EAFO,CAAT;AAGA;AAAA;AAEI;AACE,YAAC,MAAD;AAAQ,MAAA,OAAO,EAAEX,OAAjB;AAAA,6BACA,QAAC,MAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAE,GAAb;AAAiB,UAAA,KAAK,MAAtB;AAAA,iCACA,QAAC,QAAD;AACA,YAAA,eAAe,EAAE4B,eADjB;AAEA,YAAA,cAAc,EAAGU,cAFjB;AAGA,YAAA,YAAY,EAAGK,YAHf;AAIA,YAAA,YAAY,EAAGe;AAJf;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAE,UAAb;AAAA,iCACE,QAAC,OAAD;AACA,YAAA,OAAO,EAAEnD,OADT;AAEA,YAAA,WAAW,EAAGyC,WAFd;AAGA,YAAA,YAAY,EAAGE,YAHf;AAIA,YAAA,QAAQ,EAAG7C,QAJX;AAKA,YAAA,cAAc,EAAGF,cALjB;AAMA,YAAA,gBAAgB,EAAG2C,gBANnB;AAOA,YAAA,OAAO,EAAGrC;AAPV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YAHN,CA4BI;;AA5BJ;AA6BI;;GArKGP,G;;KAAAA,G;AAuKT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React,{useState ,useEffect} from \"react\";\nimport { Switch ,Route ,Router} from \"react-router-dom\";\nimport Register from './pages/home';\nimport Contract from \"./contracts/Medossier.json\"\nimport getWeb3 from './getWeb3';\nimport history from './pages/history';\nimport Patient from './pages/patients_dashboard';\nfunction App() {\n const[currentAccount,setCurrentAccount]= useState('');\n const[contract, setContract] = useState({});\n const[patient,setPatient] = useState([]);\n const[records,setRecords] = useState([]);\n\n const getWeb3Data = async()=>{\n   try{\n     //obtain web3 from getWeb3\n     const web3 = await getWeb3();\n     //obtain the accounts\n     const accounts = await web3.eth.getAccounts();\n     console.log(accounts);\n     //obtain netwrokID\n     const netwrokID = await web3.eth.net.getId();\n     console.log(netwrokID);\n     const networkdeployed = Contract.networks[netwrokID];\n     console.log(networkdeployed);\n     const instance = await new web3.eth.Contract(Contract.abi,networkdeployed && networkdeployed.address);\n     setCurrentAccount(accounts[0]);\n     setContract({...instance});\n     //Just to confirm working of addPatient and addDoctor function \n    //  const patient = await instance.methods.getPatientDetails(accounts[0]).call();\n    //  console.log(patient);\n    //  const doctor = await instance.methods.getDoctorByAddress(accounts[0]).call();\n    //  console.log(doctor);\n    // const recordlength =  await instance.methods.getrecordlist(accounts[0]).call();\n    // console.log(recordlength)\n    //   const recordlist =[];\n    //   for (const i =1 ;i<= recordlength; i++){\n    //     const record = await  instance.methods.getPatientRecords(accounts[0],i).call();\n    //     recordlist.push(record);\n    //     console.log(recordlist);\n    //   }\n    //   setRecords(recordlist);\n\n   }\n   catch(error){\n     alert(\"Cannot load web3 ,contract. Consult console for details\");\n     console.log(error);\n   }\n }\n  //Register Patient\n  const patientRegister = async(name,phone,gender,dob,blood)=>{\n    try{\n      console.log(name,phone,gender,dob,blood);\n      console.log(currentAccount);\n      contract.methods.addPatient(name,phone,gender,dob,blood).send({from:currentAccount});\n    }\n    catch(error){\n      console.log(error);\n    }\n  }\n  //Register/Add Doctor\n  const doctorRegister = async(name,hname,contact,faculty)=>{\n    try{\n      console.log(name,contact,faculty);\n      contract.methods.addDoctor(name,hname,contact,faculty).send({from:currentAccount});\n      await getWeb3Data();\n\n    }\ncatch(error){\n  console.log(error);\n}\n  }\n  //Handle  patient Login\n  const phandlelogin = async()=>{\n    try{\n      console.log(\"sucess\");\n      const patient = await contract.methods.getPatientDetails(currentAccount).call();\n      setPatient(patient);\n      console.log(patient)\n      // if(patient.length!==0){\n        getPatientRecord();\n\n        history.push('/patient')\n      // }\n      \n    }\n    catch(error){\n      console.error(error);\n      // alert(error)\n      alert(\"No records found\")\n    }\n  }\n//Patient grant Access to doctor\n  const grantAccess = async(doctor)=>{\n    try{\n       contract.methods.grantAccess(doctor).send({from:currentAccount})\n    }\n    catch(error){\n      console.error(error);\n    }\n  }\n  //Patient revoke access from doctor\n  const revokeAccess = async(doctor)=>{\n    try{\n      contract.methods.revoke_access(doctor).send({from:currentAccount})\n    }\n    catch(error){\n      console.error(error);\n      alert(error);\n    }\n  }\n//Get Patient details by patient\n  const getPatientRecord = async()=>{\n    try{\n      const recordlength =  await contract.methods.getrecordlist(currentAccount).call();\n      const recordlist =[];\n      for (let i =0 ;i< recordlength; i++){\n        const record = await  contract.methods.getPatientRecords(currentAccount,i).call();\n        console.log(record);\n\n        recordlist.push(record);\n      }\n      setRecords(recordlist);\n      console.log(records)\n\n    }\n    catch(error){\n     alert(error);\n    }\n  }\n  \n  //Handle Doctor Login\n  const dhandlelogin = async()=>{\n    try{\n      console.log(\"doctor\");\n    }\n    catch(error){\n      console.log(error);\n    }\n  }\n  useEffect(()=>{\n    getWeb3Data();\n  },[]);\n  return (\n    \n      // <div className =\"Main\">\n        <Router history={history}>\n        <Switch>\n          <Route path ='/' exact>\n          <Register\n          patientRegister={patientRegister}\n          doctorRegister ={doctorRegister}\n          phandlelogin ={phandlelogin}\n          dhandlelogin ={dhandlelogin}\n\n          />\n          </Route>\n          <Route path ='/patient'>\n            <Patient\n            patient={patient}\n            grantAccess ={grantAccess}\n            revokeAccess ={revokeAccess}\n            contract ={contract}\n            currentAccount ={currentAccount}\n            getPatientRecord ={getPatientRecord}\n            records ={records}\n            />\n          </Route>\n          </Switch>\n          </Router>\n  \n      // </div>\n    )}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}