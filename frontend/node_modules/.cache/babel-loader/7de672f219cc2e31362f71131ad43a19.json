{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nconst CID = require('cids');\n\nconst {\n  multiaddr\n} = require('multiaddr');\n\nconst multibase = require('multibase');\n\nconst multicodec = require('multicodec');\n\nconst multihash = require('multihashes');\n\nconst globSource = require('ipfs-utils/src/files/glob-source');\n\nconst urlSource = require('ipfs-utils/src/files/url-source');\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n */\n\n/**\n * @param {Options} options\n */\n\n\nfunction create(options = {}) {\n  /** @type {import('ipfs-core-types').IPFS & { getEndpointConfig: () => EndpointConfig }} */\n  const client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options)\n  };\n  return client;\n}\n\nmodule.exports = {\n  create,\n  CID,\n  multiaddr,\n  multibase,\n  multicodec,\n  multihash,\n  globSource,\n  urlSource\n};","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/src/index.js"],"names":["CID","require","multiaddr","multibase","multicodec","multihash","globSource","urlSource","create","options","client","add","addAll","bitswap","block","bootstrap","cat","commands","config","dag","dht","diag","dns","files","get","getEndpointConfig","id","isOnline","key","log","ls","mount","name","object","pin","ping","pubsub","refs","repo","resolve","start","stats","stop","swarm","version","module","exports"],"mappings":"AAAA;AACA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMK,UAAU,GAAGL,OAAO,CAAC,kCAAD,CAA1B;;AACA,MAAMM,SAAS,GAAGN,OAAO,CAAC,iCAAD,CAAzB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,SAASO,MAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA+B;AAC7B;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,GAAG,EAAEV,OAAO,CAAC,OAAD,CAAP,CAAiBQ,OAAjB,CADQ;AAEbG,IAAAA,MAAM,EAAEX,OAAO,CAAC,WAAD,CAAP,CAAqBQ,OAArB,CAFK;AAGbI,IAAAA,OAAO,EAAEZ,OAAO,CAAC,WAAD,CAAP,CAAqBQ,OAArB,CAHI;AAIbK,IAAAA,KAAK,EAAEb,OAAO,CAAC,SAAD,CAAP,CAAmBQ,OAAnB,CAJM;AAKbM,IAAAA,SAAS,EAAEd,OAAO,CAAC,aAAD,CAAP,CAAuBQ,OAAvB,CALE;AAMbO,IAAAA,GAAG,EAAEf,OAAO,CAAC,OAAD,CAAP,CAAiBQ,OAAjB,CANQ;AAObQ,IAAAA,QAAQ,EAAEhB,OAAO,CAAC,YAAD,CAAP,CAAsBQ,OAAtB,CAPG;AAQbS,IAAAA,MAAM,EAAEjB,OAAO,CAAC,UAAD,CAAP,CAAoBQ,OAApB,CARK;AASbU,IAAAA,GAAG,EAAElB,OAAO,CAAC,OAAD,CAAP,CAAiBQ,OAAjB,CATQ;AAUbW,IAAAA,GAAG,EAAEnB,OAAO,CAAC,OAAD,CAAP,CAAiBQ,OAAjB,CAVQ;AAWbY,IAAAA,IAAI,EAAEpB,OAAO,CAAC,QAAD,CAAP,CAAkBQ,OAAlB,CAXO;AAYba,IAAAA,GAAG,EAAErB,OAAO,CAAC,OAAD,CAAP,CAAiBQ,OAAjB,CAZQ;AAabc,IAAAA,KAAK,EAAEtB,OAAO,CAAC,SAAD,CAAP,CAAmBQ,OAAnB,CAbM;AAcbe,IAAAA,GAAG,EAAEvB,OAAO,CAAC,OAAD,CAAP,CAAiBQ,OAAjB,CAdQ;AAebgB,IAAAA,iBAAiB,EAAExB,OAAO,CAAC,uBAAD,CAAP,CAAiCQ,OAAjC,CAfN;AAgBbiB,IAAAA,EAAE,EAAEzB,OAAO,CAAC,MAAD,CAAP,CAAgBQ,OAAhB,CAhBS;AAiBbkB,IAAAA,QAAQ,EAAE1B,OAAO,CAAC,aAAD,CAAP,CAAuBQ,OAAvB,CAjBG;AAkBbmB,IAAAA,GAAG,EAAE3B,OAAO,CAAC,OAAD,CAAP,CAAiBQ,OAAjB,CAlBQ;AAmBboB,IAAAA,GAAG,EAAE5B,OAAO,CAAC,OAAD,CAAP,CAAiBQ,OAAjB,CAnBQ;AAoBbqB,IAAAA,EAAE,EAAE7B,OAAO,CAAC,MAAD,CAAP,CAAgBQ,OAAhB,CApBS;AAqBbsB,IAAAA,KAAK,EAAE9B,OAAO,CAAC,SAAD,CAAP,CAAmBQ,OAAnB,CArBM;AAsBbuB,IAAAA,IAAI,EAAE/B,OAAO,CAAC,QAAD,CAAP,CAAkBQ,OAAlB,CAtBO;AAuBbwB,IAAAA,MAAM,EAAEhC,OAAO,CAAC,UAAD,CAAP,CAAoBQ,OAApB,CAvBK;AAwBbyB,IAAAA,GAAG,EAAEjC,OAAO,CAAC,OAAD,CAAP,CAAiBQ,OAAjB,CAxBQ;AAyBb0B,IAAAA,IAAI,EAAElC,OAAO,CAAC,QAAD,CAAP,CAAkBQ,OAAlB,CAzBO;AA0Bb2B,IAAAA,MAAM,EAAEnC,OAAO,CAAC,UAAD,CAAP,CAAoBQ,OAApB,CA1BK;AA2Bb4B,IAAAA,IAAI,EAAEpC,OAAO,CAAC,QAAD,CAAP,CAAkBQ,OAAlB,CA3BO;AA4Bb6B,IAAAA,IAAI,EAAErC,OAAO,CAAC,QAAD,CAAP,CAAkBQ,OAAlB,CA5BO;AA6Bb8B,IAAAA,OAAO,EAAEtC,OAAO,CAAC,WAAD,CAAP,CAAqBQ,OAArB,CA7BI;AA8Bb+B,IAAAA,KAAK,EAAEvC,OAAO,CAAC,SAAD,CAAP,CAAmBQ,OAAnB,CA9BM;AA+BbgC,IAAAA,KAAK,EAAExC,OAAO,CAAC,SAAD,CAAP,CAAmBQ,OAAnB,CA/BM;AAgCbiC,IAAAA,IAAI,EAAEzC,OAAO,CAAC,QAAD,CAAP,CAAkBQ,OAAlB,CAhCO;AAiCbkC,IAAAA,KAAK,EAAE1C,OAAO,CAAC,SAAD,CAAP,CAAmBQ,OAAnB,CAjCM;AAkCbmC,IAAAA,OAAO,EAAE3C,OAAO,CAAC,WAAD,CAAP,CAAqBQ,OAArB;AAlCI,GAAf;AAqCA,SAAOC,MAAP;AACD;;AAEDmC,MAAM,CAACC,OAAP,GAAiB;AACftC,EAAAA,MADe;AAEfR,EAAAA,GAFe;AAGfE,EAAAA,SAHe;AAIfC,EAAAA,SAJe;AAKfC,EAAAA,UALe;AAMfC,EAAAA,SANe;AAOfC,EAAAA,UAPe;AAQfC,EAAAA;AARe,CAAjB","sourcesContent":["'use strict'\n/* eslint-env browser */\n\nconst CID = require('cids')\nconst { multiaddr } = require('multiaddr')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst multihash = require('multihashes')\nconst globSource = require('ipfs-utils/src/files/glob-source')\nconst urlSource = require('ipfs-utils/src/files/url-source')\n\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n */\n\n/**\n * @param {Options} options\n */\nfunction create (options = {}) {\n  /** @type {import('ipfs-core-types').IPFS & { getEndpointConfig: () => EndpointConfig }} */\n  const client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options)\n  }\n\n  return client\n}\n\nmodule.exports = {\n  create,\n  CID,\n  multiaddr,\n  multibase,\n  multicodec,\n  multihash,\n  globSource,\n  urlSource\n}\n"]},"metadata":{},"sourceType":"script"}