{"ast":null,"code":"var _jsxFileName = \"/home/ranju/location/meDossier/frontend/src/pages/render.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Switch, Route, Router } from \"react-router-dom\";\nimport Register from './home';\nimport getWeb3 from '../getWeb3';\nimport history from './history';\nimport Patient from './patients_dashboard';\nimport DocDashboard from './doctor_dashboard';\nimport { CONTRACT_ADDRESS, ABI } from \"../config.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Render() {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [contract, setContract] = useState({});\n  const [user, setUser] = useState([]);\n  const [records, setRecords] = useState([]);\n\n  const getWeb3Data = async () => {\n    try {\n      //obtain web3 from getWeb3\n      const web3 = await getWeb3(); //obtain the accounts\n\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts); //initialize contract\n\n      const instance = await new web3.eth.Contract(ABI, CONTRACT_ADDRESS);\n      setCurrentAccount(accounts[0]);\n      setContract({ ...instance\n      });\n    } catch (error) {\n      alert(\"Cannot load web3 ,contract. Consult console for details\");\n      console.log(error);\n    }\n  }; //Register Patient\n\n\n  const patientRegister = async (name, phone, gender, dob, blood) => {\n    try {\n      console.log(name, phone, gender, dob, blood);\n      console.log(currentAccount);\n      await contract.methods.addPatient(name, phone, gender, dob, blood).send({\n        from: currentAccount,\n        gas: 1000000\n      }); // await getWeb3Data();\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Register/Add Doctor\n\n\n  const doctorRegister = async (name, hname, contact, faculty, license) => {\n    try {\n      console.log(name, hname, contact, faculty);\n      const result = await contract.methods.addDoctor(name, hname, contact, faculty, license).send({\n        from: currentAccount,\n        gas: 1000000\n      }); // await getWeb3Data();\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Handle  patient Login\n\n\n  const phandlelogin = async () => {\n    try {\n      console.log(\"sucess\");\n      const patient = await contract.methods.getPatientDetails(currentAccount).call({\n        from: currentAccount\n      });\n      setUser(patient);\n      console.log(patient); // if(patient.length!==0){\n\n      getPatientRecord();\n      history.push('/patient'); // }\n    } catch (error) {\n      console.error(error); // alert(error)\n\n      alert(\"No records found\");\n    }\n  }; //Patient grant Access to doctor\n\n\n  const grantAccess = async doctor => {\n    try {\n      await contract.methods.grantAccess(doctor).send({\n        from: currentAccount,\n        gas: 1000000\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }; //Patient revoke access from doctor\n\n\n  const revokeAccess = async doctor => {\n    try {\n      console.log(doctor);\n      await contract.methods.revoke_access(doctor).send({\n        from: currentAccount,\n        gas: 1000000\n      });\n    } catch (error) {\n      console.error(error);\n      alert(error);\n    }\n  }; //Get Patient details by patient\n\n\n  const getPatientRecord = async () => {\n    try {\n      const recordlength = await contract.methods.getrecordlist(currentAccount).call({\n        from: currentAccount\n      });\n      const recordlist = [];\n\n      for (let i = 0; i < recordlength; i++) {\n        const record = await contract.methods.getPatientRecords(currentAccount, i).call({\n          from: currentAccount\n        });\n        console.log(record);\n        recordlist.push(record);\n      }\n\n      setRecords(recordlist);\n      console.log(records);\n    } catch (error) {\n      alert(error);\n    }\n  }; //Handle Doctor Login\n\n\n  const dhandlelogin = async () => {\n    try {\n      console.log(\"success\");\n      const doctor = await contract.methods.getDoctorByAddress(currentAccount).call({\n        from: currentAccount\n      });\n      setUser(doctor);\n      console.log(doctor);\n      history.push('/doctor_dashboard'); // }\n    } catch (error) {\n      console.error(error); // alert(error)\n\n      alert(\"No records found\");\n    }\n  };\n\n  useEffect(() => {\n    getWeb3Data();\n  }, []);\n  return (\n    /*#__PURE__*/\n    // <div className =\"Main\">\n    _jsxDEV(Router, {\n      history: history,\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          children: /*#__PURE__*/_jsxDEV(Register, {\n            patientRegister: patientRegister,\n            doctorRegister: doctorRegister,\n            phandlelogin: phandlelogin,\n            dhandlelogin: dhandlelogin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/patient\",\n          children: /*#__PURE__*/_jsxDEV(Patient, {\n            patient: user,\n            grantAccess: grantAccess,\n            revokeAccess: revokeAccess,\n            contract: contract,\n            currentAccount: currentAccount,\n            getPatientRecord: getPatientRecord,\n            records: records\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/doctor_dashboard\",\n          children: /*#__PURE__*/_jsxDEV(DocDashboard, {\n            doctor: user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this) // </div>\n\n  );\n}\n\n_s(Render, \"GCCuJQadfbBUNufu0T8QWLOJJg8=\");\n\n_c = Render;\nexport default Render;\n\nvar _c;\n\n$RefreshReg$(_c, \"Render\");","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/src/pages/render.js"],"names":["React","useState","useEffect","Switch","Route","Router","Register","getWeb3","history","Patient","DocDashboard","CONTRACT_ADDRESS","ABI","Render","currentAccount","setCurrentAccount","contract","setContract","user","setUser","records","setRecords","getWeb3Data","web3","accounts","eth","getAccounts","console","log","instance","Contract","error","alert","patientRegister","name","phone","gender","dob","blood","methods","addPatient","send","from","gas","doctorRegister","hname","contact","faculty","license","result","addDoctor","phandlelogin","patient","getPatientDetails","call","getPatientRecord","push","grantAccess","doctor","revokeAccess","revoke_access","recordlength","getrecordlist","recordlist","i","record","getPatientRecords","dhandlelogin","getDoctorByAddress"],"mappings":"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","sourcesContent":["\nimport React,{useState ,useEffect} from \"react\";\nimport { Switch ,Route ,Router} from \"react-router-dom\";\nimport Register from './home';\nimport getWeb3 from '../getWeb3';\nimport history from './history';\nimport Patient from './patients_dashboard';\nimport DocDashboard from './doctor_dashboard';\nimport { CONTRACT_ADDRESS, ABI } from \"../config.js\";\n\n\nfunction Render() {\n  \n const[currentAccount,setCurrentAccount]= useState('');\n const[contract, setContract] = useState({});\n const[user,setUser] = useState([]);\n const[records,setRecords] = useState([]);\n\n const getWeb3Data = async()=>{\n   try{\n      //obtain web3 from getWeb3\n      const web3 = await getWeb3();\n      //obtain the accounts\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts);\n//initialize contract\n      const instance = await new web3.eth.Contract(ABI, CONTRACT_ADDRESS);\n      setCurrentAccount(accounts[0]);\n      setContract({...instance});\n   }\n   catch(error){\n     alert(\"Cannot load web3 ,contract. Consult console for details\");\n     console.log(error);\n   }\n }\n  //Register Patient\n  const patientRegister = async(name,phone,gender,dob,blood)=>{\n    try{\n      console.log(name,phone,gender,dob,blood);\n      console.log(currentAccount);\n      await contract.methods.addPatient(name,phone,gender,dob,blood).send({from:currentAccount,gas:1000000});\n      // await getWeb3Data();\n    }\n    catch(error){\n      console.log(error);\n    }\n  }\n  //Register/Add Doctor\n  const doctorRegister = async(name,hname,contact,faculty,license)=>{\n    try{\n      console.log(name,hname,contact,faculty);\n      const result = await contract.methods.addDoctor(name,hname,contact,faculty,license).send({from:currentAccount,gas:1000000});\n      // await getWeb3Data();\n\n    }\ncatch(error){\n  console.log(error);\n}\n  }\n  //Handle  patient Login\n  const phandlelogin = async()=>{\n    try{\n      console.log(\"sucess\");\n      const patient = await contract.methods.getPatientDetails(currentAccount).call({from:currentAccount});\n      setUser(patient);\n      console.log(patient)\n      // if(patient.length!==0){\n        getPatientRecord();\n\n        history.push('/patient')\n      // }\n      \n    }\n    catch(error){\n      console.error(error);\n      // alert(error)\n      alert(\"No records found\")\n    }\n  }\n//Patient grant Access to doctor\n  const grantAccess = async(doctor)=>{\n    try{\n      await contract.methods.grantAccess(doctor).send({from:currentAccount,gas:1000000})\n    }\n    catch(error){\n      console.error(error);\n    }\n  }\n  //Patient revoke access from doctor\n  const revokeAccess = async(doctor)=>{\n    try{\n      console.log(doctor)\n      await contract.methods.revoke_access(doctor).send({from:currentAccount,gas:1000000})\n    }\n    catch(error){\n      console.error(error);\n      alert(error);\n    }\n  }\n//Get Patient details by patient\n  const getPatientRecord = async()=>{\n    try{\n      const recordlength =  await contract.methods.getrecordlist(currentAccount).call({from:currentAccount});\n      const recordlist =[];\n      for (let i =0 ;i< recordlength; i++){\n        const record = await  contract.methods.getPatientRecords(currentAccount,i).call({from:currentAccount});\n        console.log(record);\n\n        recordlist.push(record);\n      }\n      setRecords(recordlist);\n      console.log(records)\n\n    }\n    catch(error){\n     alert(error);\n    }\n  }\n  \n  //Handle Doctor Login\n  const dhandlelogin = async()=>{\n    try{\n      console.log(\"success\");\n      const doctor = await contract.methods.getDoctorByAddress(currentAccount).call({from:currentAccount});\n      setUser(doctor);\n      console.log(doctor)\n        history.push('/doctor_dashboard')\n      // }\n      \n    }\n    catch(error){\n      console.error(error);\n      // alert(error)\n      alert(\"No records found\")\n    }\n  }\n  useEffect(()=>{\n    getWeb3Data();\n  },[]);\n  return (\n    \n      // <div className =\"Main\">\n        <Router history={history}>\n        <Switch>\n          <Route path ='/' exact>\n          <Register\n          patientRegister={patientRegister}\n          doctorRegister ={doctorRegister}\n          phandlelogin ={phandlelogin}\n          dhandlelogin ={dhandlelogin}\n\n          />\n          </Route>\n          <Route path ='/patient'>\n            <Patient\n            patient={user}\n            grantAccess ={grantAccess}\n            revokeAccess ={revokeAccess}\n            contract ={contract}\n            currentAccount ={currentAccount}\n            getPatientRecord ={getPatientRecord}\n            records ={records}\n            />\n          </Route>\n          <Route exact path = \"/doctor_dashboard\">\n          <DocDashboard \n          doctor = {user}\n          />\n          </Route>\n          \n          </Switch>\n          </Router>\n  \n      // </div>\n    )\n  }\n\nexport default Render"]},"metadata":{},"sourceType":"module"}