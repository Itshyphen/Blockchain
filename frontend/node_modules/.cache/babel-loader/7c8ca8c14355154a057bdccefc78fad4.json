{"ast":null,"code":"'use strict';\n\nconst DAGLink = require('../dag-link/dagLink');\n\nconst genCid = require('../genCid');\n/**\n * toDAGLink converts a DAGNode to a DAGLink\n *\n * @typedef {import('../genCid').GenCIDOptions} GenCIDOptions\n *\n * @typedef {object} ToDagLinkExtraOptions\n * @property {string} [name]\n *\n * @typedef {GenCIDOptions & ToDagLinkExtraOptions} ToDagLinkOptions\n *\n * @param {import('./dagNode')} node\n * @param {ToDagLinkOptions} options\n */\n\n\nconst toDAGLink = async (node, options = {}) => {\n  const buf = node.serialize();\n  const nodeCid = await genCid.cid(buf, options);\n  return new DAGLink(options.name || '', node.size, nodeCid);\n};\n\nmodule.exports = toDAGLink;","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/node_modules/ipld-dag-pb/src/dag-node/toDagLink.js"],"names":["DAGLink","require","genCid","toDAGLink","node","options","buf","serialize","nodeCid","cid","name","size","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,SAAS,GAAG,OAAOC,IAAP,EAAaC,OAAO,GAAG,EAAvB,KAA8B;AAC9C,QAAMC,GAAG,GAAGF,IAAI,CAACG,SAAL,EAAZ;AACA,QAAMC,OAAO,GAAG,MAAMN,MAAM,CAACO,GAAP,CAAWH,GAAX,EAAgBD,OAAhB,CAAtB;AACA,SAAO,IAAIL,OAAJ,CAAYK,OAAO,CAACK,IAAR,IAAgB,EAA5B,EAAgCN,IAAI,CAACO,IAArC,EAA2CH,OAA3C,CAAP;AACD,CAJD;;AAMAI,MAAM,CAACC,OAAP,GAAiBV,SAAjB","sourcesContent":["'use strict'\n\nconst DAGLink = require('../dag-link/dagLink')\nconst genCid = require('../genCid')\n\n/**\n * toDAGLink converts a DAGNode to a DAGLink\n *\n * @typedef {import('../genCid').GenCIDOptions} GenCIDOptions\n *\n * @typedef {object} ToDagLinkExtraOptions\n * @property {string} [name]\n *\n * @typedef {GenCIDOptions & ToDagLinkExtraOptions} ToDagLinkOptions\n *\n * @param {import('./dagNode')} node\n * @param {ToDagLinkOptions} options\n */\nconst toDAGLink = async (node, options = {}) => {\n  const buf = node.serialize()\n  const nodeCid = await genCid.cid(buf, options)\n  return new DAGLink(options.name || '', node.size, nodeCid)\n}\n\nmodule.exports = toDAGLink\n"]},"metadata":{},"sourceType":"script"}