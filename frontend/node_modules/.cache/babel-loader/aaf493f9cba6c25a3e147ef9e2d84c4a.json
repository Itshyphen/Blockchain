{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst {\n  DAGNode,\n  DAGLink\n} = require('ipld-dag-pb');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get(cid, options = {}) {\n    const res = await api.post('object/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return new DAGNode(uint8ArrayFromString(data.Data, 'base64pad'), (data.Links || []).map((\n    /** @type {any} */\n    l) => new DAGLink(l.Name, l.Size, l.Hash)));\n  }\n\n  return get;\n});","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/src/object/get.js"],"names":["CID","require","DAGNode","DAGLink","configure","toUrlSearchParams","uint8ArrayFromString","module","exports","api","get","cid","options","res","post","timeout","signal","searchParams","arg","Uint8Array","dataEncoding","headers","data","json","Data","Links","map","l","Name","Size","Hash"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBF,OAAO,CAAC,aAAD,CAApC;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMK,oBAAoB,GAAGL,OAAO,CAAC,yBAAD,CAApC;AAEA;AACA;AACA;AACA;;;AAEAM,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,GAAf,CAAoBC,GAApB,EAAyBC,OAAO,GAAG,EAAnC,EAAuC;AACrC,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,YAAT,EAAuB;AACvCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADsB;AAEvCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFuB;AAGvCC,MAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9Ba,QAAAA,GAAG,EAAG,GAAEP,GAAG,YAAYQ,UAAf,GAA4B,IAAInB,GAAJ,CAAQW,GAAR,CAA5B,GAA2CA,GAAI,EADzB;AAE9BS,QAAAA,YAAY,EAAE,QAFgB;AAG9B,WAAGR;AAH2B,OAAD,CAHQ;AAQvCS,MAAAA,OAAO,EAAET,OAAO,CAACS;AARsB,KAAvB,CAAlB;AAUA,UAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAJ,EAAnB;AAEA,WAAO,IAAIrB,OAAJ,CACLI,oBAAoB,CAACgB,IAAI,CAACE,IAAN,EAAY,WAAZ,CADf,EAEL,CAACF,IAAI,CAACG,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuB;AAAC;AAAmBC,IAAAA,CAApB,KAA0B,IAAIxB,OAAJ,CAAYwB,CAAC,CAACC,IAAd,EAAoBD,CAAC,CAACE,IAAtB,EAA4BF,CAAC,CAACG,IAA9B,CAAjD,CAFK,CAAP;AAID;;AACD,SAAOpB,GAAP;AACD,CAvByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { DAGNode, DAGLink } = require('ipld-dag-pb')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return new DAGNode(\n      uint8ArrayFromString(data.Data, 'base64pad'),\n      (data.Links || []).map((/** @type {any} */ l) => new DAGLink(l.Name, l.Size, l.Hash))\n    )\n  }\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}