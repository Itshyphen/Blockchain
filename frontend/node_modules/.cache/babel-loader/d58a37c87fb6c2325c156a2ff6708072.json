{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multipartRequest = require('../../lib/multipart-request');\n\nconst configure = require('../../lib/configure');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n\nconst abortSignal = require('../../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData(cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n    const {\n      Hash\n    } = await (await api.post('object/patch/set-data', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [`${cid instanceof Uint8Array ? new CID(cid) : cid}`],\n        ...options\n      }),\n      ...(await multipartRequest(data, controller, options.headers))\n    })).json();\n    return new CID(Hash);\n  }\n\n  return setData;\n});","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/src/object/patch/set-data.js"],"names":["CID","require","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","setData","cid","data","options","controller","signal","Hash","post","timeout","searchParams","arg","Uint8Array","headers","json"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,6BAAD,CAAhC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAAjC;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,wBAAD,CAA3B;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAsBL,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;;;AAEAM,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,OAAf,CAAwBC,GAAxB,EAA6BC,IAA7B,EAAmCC,OAAO,GAAG,EAA7C,EAAiD;AAC/C;AACA,UAAMC,UAAU,GAAG,IAAIR,eAAJ,EAAnB;AACA,UAAMS,MAAM,GAAGV,WAAW,CAACS,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B,CAH+C,CAK/C;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAM,CAAC,MAAMP,GAAG,CAACQ,IAAJ,CAAS,uBAAT,EAAkC;AAC9DC,MAAAA,OAAO,EAAEL,OAAO,CAACK,OAD6C;AAE9DH,MAAAA,MAF8D;AAG9DI,MAAAA,YAAY,EAAEf,iBAAiB,CAAC;AAC9BgB,QAAAA,GAAG,EAAE,CACF,GAAET,GAAG,YAAYU,UAAf,GAA4B,IAAIrB,GAAJ,CAAQW,GAAR,CAA5B,GAA2CA,GAAI,EAD/C,CADyB;AAI9B,WAAGE;AAJ2B,OAAD,CAH+B;AAS9D,UACE,MAAMX,gBAAgB,CAACU,IAAD,EAAOE,UAAP,EAAmBD,OAAO,CAACS,OAA3B,CADxB;AAT8D,KAAlC,CAAP,EAYnBC,IAZmB,EAAvB;AAcA,WAAO,IAAIvB,GAAJ,CAAQgB,IAAR,CAAP;AACD;;AACD,SAAON,OAAP;AACD,CA3ByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multipartRequest = require('../../lib/multipart-request')\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\nconst abortSignal = require('../../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const { Hash } = await (await api.post('object/patch/set-data', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid instanceof Uint8Array ? new CID(cid) : cid}`\n        ],\n        ...options\n      }),\n      ...(\n        await multipartRequest(data, controller, options.headers)\n      )\n    })).json()\n\n    return new CID(Hash)\n  }\n  return setData\n})\n"]},"metadata":{},"sourceType":"script"}