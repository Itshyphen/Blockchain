{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst {\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"put\"]}\n   */\n  async function put(obj, options = {}) {\n    let tmpObj = {\n      /** @type {string | undefined} */\n      Data: undefined,\n\n      /** @type {{ Name: string, Hash: string, Size: number }[]} */\n      Links: []\n    };\n\n    if (obj instanceof Uint8Array) {\n      if (!options.enc) {\n        tmpObj = {\n          // FIXME: this will corrupt data for byte values over 127\n          Data: uint8ArrayToString(obj),\n          Links: []\n        };\n      }\n    } else if (obj instanceof DAGNode) {\n      tmpObj = {\n        // FIXME: this will corrupt data for byte values over 127\n        Data: uint8ArrayToString(obj.Data),\n        Links: obj.Links.map(l => ({\n          Name: l.Name,\n          Hash: l.Hash.toString(),\n          Size: l.Tsize\n        }))\n      };\n    } else if (typeof obj === 'object') {\n      // FIXME: this will corrupt data for for byte values over 127\n      if (obj.Data) {\n        tmpObj.Data = uint8ArrayToString(obj.Data);\n      }\n\n      if (obj.Links) {\n        // @ts-ignore Size is Tsize\n        tmpObj.Links = obj.Links;\n      }\n    } else {\n      throw new Error('obj not recognized');\n    }\n\n    let buf;\n\n    if (obj instanceof Uint8Array && options.enc) {\n      buf = obj;\n    } else {\n      options.enc = 'json';\n      buf = uint8ArrayFromString(JSON.stringify(tmpObj));\n    } // allow aborting requests on body errors\n\n\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n    const res = await api.post('object/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(await multipartRequest(buf, controller, options.headers))\n    });\n    const {\n      Hash\n    } = await res.json();\n    return new CID(Hash);\n  }\n\n  return put;\n});","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/src/object/put.js"],"names":["CID","require","DAGNode","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","uint8ArrayToString","uint8ArrayFromString","module","exports","api","put","obj","options","tmpObj","Data","undefined","Links","Uint8Array","enc","map","l","Name","Hash","toString","Size","Tsize","Error","buf","JSON","stringify","controller","signal","res","post","timeout","searchParams","headers","json"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { DAGNode } = require('ipld-dag-pb')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"put\"]}\n   */\n  async function put (obj, options = {}) {\n    let tmpObj = {\n      /** @type {string | undefined} */\n      Data: undefined,\n      /** @type {{ Name: string, Hash: string, Size: number }[]} */\n      Links: []\n    }\n\n    if (obj instanceof Uint8Array) {\n      if (!options.enc) {\n        tmpObj = {\n          // FIXME: this will corrupt data for byte values over 127\n          Data: uint8ArrayToString(obj),\n          Links: []\n        }\n      }\n    } else if (obj instanceof DAGNode) {\n      tmpObj = {\n        // FIXME: this will corrupt data for byte values over 127\n        Data: uint8ArrayToString(obj.Data),\n        Links: obj.Links.map(l => ({\n          Name: l.Name,\n          Hash: l.Hash.toString(),\n          Size: l.Tsize\n        }))\n      }\n    } else if (typeof obj === 'object') {\n      // FIXME: this will corrupt data for for byte values over 127\n      if (obj.Data) {\n        tmpObj.Data = uint8ArrayToString(obj.Data)\n      }\n\n      if (obj.Links) {\n        // @ts-ignore Size is Tsize\n        tmpObj.Links = obj.Links\n      }\n    } else {\n      throw new Error('obj not recognized')\n    }\n\n    let buf\n    if (obj instanceof Uint8Array && options.enc) {\n      buf = obj\n    } else {\n      options.enc = 'json'\n      buf = uint8ArrayFromString(JSON.stringify(tmpObj))\n    }\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('object/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(buf, controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return new CID(Hash)\n  }\n  return put\n})\n"]},"metadata":{},"sourceType":"script"}