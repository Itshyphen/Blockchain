{"ast":null,"code":"'use strict';\n\nconst sortLinks = require('./sortLinks');\n\nconst DAGLink = require('../dag-link/dagLink');\n\nconst {\n  createDagLinkFromB58EncodedHash\n} = require('../dag-link/util');\n\nconst {\n  serializeDAGNode\n} = require('../serialize');\n\nconst toDAGLink = require('./toDagLink');\n\nconst addLink = require('./addLink');\n\nconst rmLink = require('./rmLink');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('../types').DAGLinkLike} DAGLinkLike\n */\n\n\nclass DAGNode {\n  /**\n   *@param {Uint8Array | string} [data]\n   * @param {(DAGLink | DAGLinkLike)[]} links\n   * @param {number | null} [serializedSize]\n   */\n  constructor(data, links = [], serializedSize = null) {\n    if (!data) {\n      data = new Uint8Array(0);\n    }\n\n    if (typeof data === 'string') {\n      data = uint8ArrayFromString(data);\n    }\n\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Passed \\'data\\' is not a Uint8Array or a String!');\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!');\n    }\n\n    const sortedLinks = links.map(link => {\n      return link instanceof DAGLink ? link : createDagLinkFromB58EncodedHash(link);\n    });\n    sortLinks(sortedLinks);\n    this.Data = data;\n    this.Links = sortedLinks;\n    Object.defineProperties(this, {\n      _serializedSize: {\n        value: serializedSize,\n        writable: true,\n        enumerable: false\n      },\n      _size: {\n        value: null,\n        writable: true,\n        enumerable: false\n      }\n    });\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this.Links.map(l => l.toJSON()),\n        size: this.size\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  toString() {\n    return `DAGNode <data: \"${uint8ArrayToString(this.Data, 'base64urlpad')}\", links: ${this.Links.length}, size: ${this.size}>`;\n  }\n\n  _invalidateCached() {\n    this._serializedSize = null;\n    this._size = null;\n  }\n  /**\n   * @param {DAGLink | import('../types').DAGLinkLike} link\n   */\n\n\n  addLink(link) {\n    this._invalidateCached();\n\n    return addLink(this, link);\n  }\n  /**\n   * @param {DAGLink | string | CID} link\n   */\n\n\n  rmLink(link) {\n    this._invalidateCached();\n\n    return rmLink(this, link);\n  }\n  /**\n   * @param {import('./toDagLink').ToDagLinkOptions} [options]\n   */\n\n\n  toDAGLink(options) {\n    return toDAGLink(this, options);\n  }\n\n  serialize() {\n    const buf = serializeDAGNode(this);\n    this._serializedSize = buf.length;\n    return buf;\n  }\n\n  get size() {\n    if (this._size == null) {\n      let serializedSize;\n\n      if (serializedSize == null) {\n        this._serializedSize = this.serialize().length;\n        serializedSize = this._serializedSize;\n      }\n\n      this._size = this.Links.reduce((sum, l) => sum + l.Tsize, serializedSize);\n    }\n\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n}\n\nmodule.exports = DAGNode;","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/node_modules/ipld-dag-pb/src/dag-node/dagNode.js"],"names":["sortLinks","require","DAGLink","createDagLinkFromB58EncodedHash","serializeDAGNode","toDAGLink","addLink","rmLink","uint8ArrayFromString","uint8ArrayToString","DAGNode","constructor","data","links","serializedSize","Uint8Array","Error","sortedLinks","map","link","Data","Links","Object","defineProperties","_serializedSize","value","writable","enumerable","_size","toJSON","_json","freeze","l","size","assign","toString","length","_invalidateCached","options","serialize","buf","reduce","sum","Tsize","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAsCF,OAAO,CAAC,kBAAD,CAAnD;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAuBH,OAAO,CAAC,cAAD,CAApC;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMO,oBAAoB,GAAGP,OAAO,CAAC,yBAAD,CAApC;;AACA,MAAMQ,kBAAkB,GAAGR,OAAO,CAAC,uBAAD,CAAlC;AAEA;AACA;AACA;AACA;;;AAEA,MAAMS,OAAN,CAAc;AACZ;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,KAAK,GAAG,EAAhB,EAAoBC,cAAc,GAAG,IAArC,EAA2C;AACpD,QAAI,CAACF,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAG,IAAIG,UAAJ,CAAe,CAAf,CAAP;AACD;;AACD,QAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,MAAAA,IAAI,GAAGJ,oBAAoB,CAACI,IAAD,CAA3B;AACD;;AAED,QAAI,EAAEA,IAAI,YAAYG,UAAlB,CAAJ,EAAmC;AACjC,YAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACD;;AAED,QAAIF,cAAc,KAAK,IAAnB,IAA2B,OAAOA,cAAP,KAA0B,QAAzD,EAAmE;AACjE,YAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,UAAMC,WAAW,GAAGJ,KAAK,CAACK,GAAN,CAAWC,IAAD,IAAU;AACtC,aAAOA,IAAI,YAAYjB,OAAhB,GACHiB,IADG,GAEHhB,+BAA+B,CAACgB,IAAD,CAFnC;AAGD,KAJmB,CAApB;AAKAnB,IAAAA,SAAS,CAACiB,WAAD,CAAT;AAEA,SAAKG,IAAL,GAAYR,IAAZ;AACA,SAAKS,KAAL,GAAaJ,WAAb;AAEAK,IAAAA,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5BC,MAAAA,eAAe,EAAE;AAAEC,QAAAA,KAAK,EAAEX,cAAT;AAAyBY,QAAAA,QAAQ,EAAE,IAAnC;AAAyCC,QAAAA,UAAU,EAAE;AAArD,OADW;AAE5BC,MAAAA,KAAK,EAAE;AAAEH,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,QAAQ,EAAE,IAAzB;AAA+BC,QAAAA,UAAU,EAAE;AAA3C;AAFqB,KAA9B;AAID;;AAEDE,EAAAA,MAAM,GAAI;AACR,QAAI,CAAC,KAAKC,KAAV,EAAiB;AACf,WAAKA,KAAL,GAAaR,MAAM,CAACS,MAAP,CAAc;AACzBnB,QAAAA,IAAI,EAAE,KAAKQ,IADc;AAEzBP,QAAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWH,GAAX,CAAgBc,CAAD,IAAOA,CAAC,CAACH,MAAF,EAAtB,CAFkB;AAGzBI,QAAAA,IAAI,EAAE,KAAKA;AAHc,OAAd,CAAb;AAKD;;AAED,WAAOX,MAAM,CAACY,MAAP,CAAc,EAAd,EAAkB,KAAKJ,KAAvB,CAAP;AACD;;AAEDK,EAAAA,QAAQ,GAAI;AACV,WAAQ,mBAAkB1B,kBAAkB,CAAC,KAAKW,IAAN,EAAY,cAAZ,CAA4B,aAAY,KAAKC,KAAL,CAAWe,MAAO,WAAU,KAAKH,IAAK,GAA1H;AACD;;AAEDI,EAAAA,iBAAiB,GAAI;AACnB,SAAKb,eAAL,GAAuB,IAAvB;AACA,SAAKI,KAAL,GAAa,IAAb;AACD;AAED;AACF;AACA;;;AACEtB,EAAAA,OAAO,CAAEa,IAAF,EAAQ;AACb,SAAKkB,iBAAL;;AACA,WAAO/B,OAAO,CAAC,IAAD,EAAOa,IAAP,CAAd;AACD;AAED;AACF;AACA;;;AACEZ,EAAAA,MAAM,CAAEY,IAAF,EAAQ;AACZ,SAAKkB,iBAAL;;AACA,WAAO9B,MAAM,CAAC,IAAD,EAAOY,IAAP,CAAb;AACD;AAED;AACF;AACA;;;AACEd,EAAAA,SAAS,CAAEiC,OAAF,EAAW;AAClB,WAAOjC,SAAS,CAAC,IAAD,EAAOiC,OAAP,CAAhB;AACD;;AAEDC,EAAAA,SAAS,GAAI;AACX,UAAMC,GAAG,GAAGpC,gBAAgB,CAAC,IAAD,CAA5B;AAEA,SAAKoB,eAAL,GAAuBgB,GAAG,CAACJ,MAA3B;AAEA,WAAOI,GAAP;AACD;;AAEO,MAAJP,IAAI,GAAI;AACV,QAAI,KAAKL,KAAL,IAAc,IAAlB,EAAwB;AACtB,UAAId,cAAJ;;AAEA,UAAIA,cAAc,IAAI,IAAtB,EAA4B;AAC1B,aAAKU,eAAL,GAAuB,KAAKe,SAAL,GAAiBH,MAAxC;AACAtB,QAAAA,cAAc,GAAG,KAAKU,eAAtB;AACD;;AAED,WAAKI,KAAL,GAAa,KAAKP,KAAL,CAAWoB,MAAX,CAAkB,CAACC,GAAD,EAAMV,CAAN,KAAYU,GAAG,GAAGV,CAAC,CAACW,KAAtC,EAA6C7B,cAA7C,CAAb;AACD;;AAED,WAAO,KAAKc,KAAZ;AACD;;AAEO,MAAJK,IAAI,CAAEA,IAAF,EAAQ;AACd,UAAM,IAAIjB,KAAJ,CAAU,yCAAV,CAAN;AACD;;AA3GW;;AA8Gd4B,MAAM,CAACC,OAAP,GAAiBnC,OAAjB","sourcesContent":["'use strict'\n\nconst sortLinks = require('./sortLinks')\nconst DAGLink = require('../dag-link/dagLink')\nconst { createDagLinkFromB58EncodedHash } = require('../dag-link/util')\nconst { serializeDAGNode } = require('../serialize')\nconst toDAGLink = require('./toDagLink')\nconst addLink = require('./addLink')\nconst rmLink = require('./rmLink')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('../types').DAGLinkLike} DAGLinkLike\n */\n\nclass DAGNode {\n  /**\n   *@param {Uint8Array | string} [data]\n   * @param {(DAGLink | DAGLinkLike)[]} links\n   * @param {number | null} [serializedSize]\n   */\n  constructor (data, links = [], serializedSize = null) {\n    if (!data) {\n      data = new Uint8Array(0)\n    }\n    if (typeof data === 'string') {\n      data = uint8ArrayFromString(data)\n    }\n\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Passed \\'data\\' is not a Uint8Array or a String!')\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!')\n    }\n\n    const sortedLinks = links.map((link) => {\n      return link instanceof DAGLink\n        ? link\n        : createDagLinkFromB58EncodedHash(link)\n    })\n    sortLinks(sortedLinks)\n\n    this.Data = data\n    this.Links = sortedLinks\n\n    Object.defineProperties(this, {\n      _serializedSize: { value: serializedSize, writable: true, enumerable: false },\n      _size: { value: null, writable: true, enumerable: false }\n    })\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this.Links.map((l) => l.toJSON()),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <data: \"${uint8ArrayToString(this.Data, 'base64urlpad')}\", links: ${this.Links.length}, size: ${this.size}>`\n  }\n\n  _invalidateCached () {\n    this._serializedSize = null\n    this._size = null\n  }\n\n  /**\n   * @param {DAGLink | import('../types').DAGLinkLike} link\n   */\n  addLink (link) {\n    this._invalidateCached()\n    return addLink(this, link)\n  }\n\n  /**\n   * @param {DAGLink | string | CID} link\n   */\n  rmLink (link) {\n    this._invalidateCached()\n    return rmLink(this, link)\n  }\n\n  /**\n   * @param {import('./toDagLink').ToDagLinkOptions} [options]\n   */\n  toDAGLink (options) {\n    return toDAGLink(this, options)\n  }\n\n  serialize () {\n    const buf = serializeDAGNode(this)\n\n    this._serializedSize = buf.length\n\n    return buf\n  }\n\n  get size () {\n    if (this._size == null) {\n      let serializedSize\n\n      if (serializedSize == null) {\n        this._serializedSize = this.serialize().length\n        serializedSize = this._serializedSize\n      }\n\n      this._size = this.Links.reduce((sum, l) => sum + l.Tsize, serializedSize)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n}\n\nmodule.exports = DAGNode\n"]},"metadata":{},"sourceType":"script"}