{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multihashing = require('multihashing-async');\n\nconst {\n  multihash\n} = multihashing;\n\nconst multicodec = require('multicodec');\n/**\n * @typedef {import('cids').CIDVersion} CIDVersion\n * @typedef {import('multihashing-async').multihash.HashCode} HashCode\n * @typedef {import('interface-ipld-format').Format<Uint8Array>} RawFormat\n */\n\n/**\n * Binary resolver\n *\n * @type {RawFormat}\n */\n\n\nmodule.exports = {\n  codec: multicodec.RAW,\n  defaultHashAlg: multihash.names['sha2-256'],\n  resolver: {\n    /**\n     * Resolves a path within a Raw block.\n     *\n     * Always returns the raw data as value without any remainderPath.\n     *\n     * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n     * @param {string} [path='/'] - Path that should be resolved.  Must be '/' or an exception is thrown\n     */\n    resolve: (binaryBlob, path) => {\n      if (path !== '/') {\n        throw new Error('Only the root path / may be resolved');\n      }\n\n      return {\n        value: binaryBlob,\n        remainderPath: ''\n      };\n    },\n\n    /**\n     * Return all available paths of a block.\n     *\n     * @generator\n     * @param {Uint8Array} binaryBlob - The raw data\n     */\n    async *tree(binaryBlob) {}\n\n  },\n  util: {\n    /**\n     * @param {Uint8Array} data\n     */\n    deserialize: data => {\n      return data;\n    },\n\n    /**\n     * @param {Uint8Array} data\n     */\n    serialize: data => {\n      return data;\n    },\n\n    /**\n     * Calculate the CID of the binary blob.\n     *\n     * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n     * @param {Object} [userOptions] - Options to create the CID\n     * @param {CIDVersion} [userOptions.cidVersion=1] - CID version number\n     * @param {HashCode} [userOptions.hashAlg=multihash.names['sha2-256']] - Defaults to the defaultHashAlg of the format\n     */\n    cid: async (binaryBlob, userOptions = {}) => {\n      const options = {\n        cidVersion: userOptions.cidVersion == null ? 1 : userOptions.cidVersion,\n        hashAlg: userOptions.hashAlg == null ? module.exports.defaultHashAlg : userOptions.hashAlg\n      };\n      const hashName = multihash.codes[options.hashAlg];\n      const hash = await multihashing(binaryBlob, hashName);\n      const codecName = multicodec.getNameFromCode(module.exports.codec);\n      const cid = new CID(options.cidVersion, codecName, hash);\n      return cid;\n    }\n  }\n};","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipld-raw/src/index.js"],"names":["CID","require","multihashing","multihash","multicodec","module","exports","codec","RAW","defaultHashAlg","names","resolver","resolve","binaryBlob","path","Error","value","remainderPath","tree","util","deserialize","data","serialize","cid","userOptions","options","cidVersion","hashAlg","hashName","codes","hash","codecName","getNameFromCode"],"mappings":"AAAA;;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAgBD,YAAtB;;AACA,MAAME,UAAU,GAAGH,OAAO,CAAC,YAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,KAAK,EAAEH,UAAU,CAACI,GADH;AAEfC,EAAAA,cAAc,EAAEN,SAAS,CAACO,KAAV,CAAgB,UAAhB,CAFD;AAGfC,EAAAA,QAAQ,EAAE;AACR;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAE,CAACC,UAAD,EAAaC,IAAb,KAAsB;AAC7B,UAAIA,IAAI,KAAK,GAAb,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,aAAO;AACLC,QAAAA,KAAK,EAAEH,UADF;AAELI,QAAAA,aAAa,EAAE;AAFV,OAAP;AAID,KAlBO;;AAmBR;AACJ;AACA;AACA;AACA;AACA;AACI,WAAQC,IAAR,CAAcL,UAAd,EAA0B,CAEzB;;AA3BO,GAHK;AAgCfM,EAAAA,IAAI,EAAE;AACJ;AACJ;AACA;AACIC,IAAAA,WAAW,EAAGC,IAAD,IAAU;AACrB,aAAOA,IAAP;AACD,KANG;;AAOJ;AACJ;AACA;AACIC,IAAAA,SAAS,EAAGD,IAAD,IAAU;AACnB,aAAOA,IAAP;AACD,KAZG;;AAaJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIE,IAAAA,GAAG,EAAE,OAAOV,UAAP,EAAmBW,WAAW,GAAG,EAAjC,KAAwC;AAC3C,YAAMC,OAAO,GAAG;AACdC,QAAAA,UAAU,EAAEF,WAAW,CAACE,UAAZ,IAA0B,IAA1B,GAAiC,CAAjC,GAAqCF,WAAW,CAACE,UAD/C;AAEdC,QAAAA,OAAO,EAAEH,WAAW,CAACG,OAAZ,IAAuB,IAAvB,GAA8BtB,MAAM,CAACC,OAAP,CAAeG,cAA7C,GAA8De,WAAW,CAACG;AAFrE,OAAhB;AAKA,YAAMC,QAAQ,GAAGzB,SAAS,CAAC0B,KAAV,CAAgBJ,OAAO,CAACE,OAAxB,CAAjB;AACA,YAAMG,IAAI,GAAG,MAAM5B,YAAY,CAACW,UAAD,EAAae,QAAb,CAA/B;AACA,YAAMG,SAAS,GAAG3B,UAAU,CAAC4B,eAAX,CAA2B3B,MAAM,CAACC,OAAP,CAAeC,KAA1C,CAAlB;AACA,YAAMgB,GAAG,GAAG,IAAIvB,GAAJ,CAAQyB,OAAO,CAACC,UAAhB,EAA4BK,SAA5B,EAAuCD,IAAvC,CAAZ;AAEA,aAAOP,GAAP;AACD;AAjCG;AAhCS,CAAjB","sourcesContent":["'use strict'\nconst CID = require('cids')\nconst multihashing = require('multihashing-async')\nconst { multihash } = multihashing\nconst multicodec = require('multicodec')\n\n/**\n * @typedef {import('cids').CIDVersion} CIDVersion\n * @typedef {import('multihashing-async').multihash.HashCode} HashCode\n * @typedef {import('interface-ipld-format').Format<Uint8Array>} RawFormat\n */\n\n/**\n * Binary resolver\n *\n * @type {RawFormat}\n */\nmodule.exports = {\n  codec: multicodec.RAW,\n  defaultHashAlg: multihash.names['sha2-256'],\n  resolver: {\n    /**\n     * Resolves a path within a Raw block.\n     *\n     * Always returns the raw data as value without any remainderPath.\n     *\n     * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n     * @param {string} [path='/'] - Path that should be resolved.  Must be '/' or an exception is thrown\n     */\n    resolve: (binaryBlob, path) => {\n      if (path !== '/') {\n        throw new Error('Only the root path / may be resolved')\n      }\n\n      return {\n        value: binaryBlob,\n        remainderPath: ''\n      }\n    },\n    /**\n     * Return all available paths of a block.\n     *\n     * @generator\n     * @param {Uint8Array} binaryBlob - The raw data\n     */\n    async * tree (binaryBlob) {\n\n    }\n  },\n  util: {\n    /**\n     * @param {Uint8Array} data\n     */\n    deserialize: (data) => {\n      return data\n    },\n    /**\n     * @param {Uint8Array} data\n     */\n    serialize: (data) => {\n      return data\n    },\n    /**\n     * Calculate the CID of the binary blob.\n     *\n     * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n     * @param {Object} [userOptions] - Options to create the CID\n     * @param {CIDVersion} [userOptions.cidVersion=1] - CID version number\n     * @param {HashCode} [userOptions.hashAlg=multihash.names['sha2-256']] - Defaults to the defaultHashAlg of the format\n     */\n    cid: async (binaryBlob, userOptions = {}) => {\n      const options = {\n        cidVersion: userOptions.cidVersion == null ? 1 : userOptions.cidVersion,\n        hashAlg: userOptions.hashAlg == null ? module.exports.defaultHashAlg : userOptions.hashAlg\n      }\n\n      const hashName = multihash.codes[options.hashAlg]\n      const hash = await multihashing(binaryBlob, hashName)\n      const codecName = multicodec.getNameFromCode(module.exports.codec)\n      const cid = new CID(options.cidVersion, codecName, hash)\n\n      return cid\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}