{"ast":null,"code":"var _jsxFileName = \"/home/ranju/location/meDossier/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { Switch, Route, Router } from \"react-router-dom\";\nimport Register from './pages/home';\nimport { CONTRACT_ADDRESS, ABI } from \"./config.js\"; // import getWeb3 from './getWeb3';\n\nimport Web3 from 'web3';\nimport history from './pages/history';\nimport Patient from './pages/patients_dashboard';\nimport WebPage from './pages/pages.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst web3 = new Web3(Web3.givenProvider);\nconst contract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS);\n\nfunction App() {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(''); //  const[contract, setContract] = useState({});\n\n  const [patient, setPatient] = useState([]);\n\n  const getWeb3Data = async () => {\n    try {\n      //obtain web3 from getWeb3\n      //  const web3 = await getWeb3();\n      //obtain the accounts\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts); //obtain netwrokID\n      //  const netwrokID = await web3.eth.net.getId();\n      //  console.log(netwrokID);\n      //  const networkdeployed = Contract.networks[netwrokID];\n      //  console.log(networkdeployed);\n      //  const contract = await new web3.eth.Contract(ABI,CONTRACT_ADDRESS);\n\n      setCurrentAccount(accounts[0]); //  setContract({...instance});\n      //Just to confirm working of addPatient and addDoctor function \n      //  const patient = await instance.methods.getPatientDetails(accounts[0]).call();\n      //  console.log(patient);\n      //  const doctor = await instance.methods.getDoctorByAddress(accounts[0]).call();\n      //  console.log(doctor);\n    } catch (error) {\n      alert(\"Cannot load web3 ,contract. Consult console for details\");\n      console.log(error);\n    }\n  }; //Register Patient\n\n\n  const patientRegister = async (name, phone, gender, dob, blood) => {\n    try {\n      console.log(name, phone, gender, dob, blood);\n      console.log(currentAccount);\n      const gas = await contract.methods.addPatient(name, phone, gender, dob, blood).estimateGas();\n      contract.methods.addPatient(name, phone, gender, dob, blood).send({\n        from: currentAccount,\n        gas\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Register/Add Doctor\n\n\n  const doctorRegister = async (name, hname, contact, faculty) => {\n    try {\n      await getWeb3Data();\n      console.log(name, contact, faculty);\n      contract.methods.addDoctor(name, hname, contact, faculty).send({\n        from: currentAccount\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Handle  patient Login\n\n\n  const phandlelogin = async () => {\n    try {\n      console.log(\"sucess\");\n      const patient = await contract.methods.getPatientDetails(currentAccount).call();\n      setPatient(patient);\n      console.log(patient); // if(patient.length!==0){\n\n      history.push('/patient'); // }\n    } catch (error) {\n      console.error(error); // alert(error)\n\n      alert(\"No records found\");\n    }\n  }; //Patient grant Access to doctor\n\n\n  const grantAccess = async doctor => {\n    try {\n      contract.methods.grantAccess(doctor).send({\n        from: currentAccount\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }; //Patient revoke access from doctor\n\n\n  const revokeAccess = async doctor => {\n    try {\n      contract.methods.revoke_access(doctor).send({\n        from: currentAccount\n      });\n    } catch (error) {\n      console.error(error);\n      alert(error);\n    }\n  }; //Handle Doctor Login\n\n\n  const dhandlelogin = async () => {\n    try {\n      console.log(\"doctor\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getWeb3Data();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      history: history,\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          children: /*#__PURE__*/_jsxDEV(Register, {\n            patientRegister: patientRegister,\n            doctorRegister: doctorRegister,\n            phandlelogin: phandlelogin,\n            dhandlelogin: dhandlelogin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/patient\",\n          children: /*#__PURE__*/_jsxDEV(Patient, {\n            patient: patient,\n            grantAccess: grantAccess,\n            revokeAccess: revokeAccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"kfcss0Jjj5fAU5Ed+08tEU/GeU8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/src/App.js"],"names":["React","useState","useEffect","Switch","Route","Router","Register","CONTRACT_ADDRESS","ABI","Web3","history","Patient","WebPage","web3","givenProvider","contract","eth","Contract","App","currentAccount","setCurrentAccount","patient","setPatient","getWeb3Data","accounts","getAccounts","console","log","error","alert","patientRegister","name","phone","gender","dob","blood","gas","methods","addPatient","estimateGas","send","from","doctorRegister","hname","contact","faculty","addDoctor","phandlelogin","getPatientDetails","call","push","grantAccess","doctor","revokeAccess","revoke_access","dhandlelogin"],"mappings":"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","sourcesContent":["import './App.css';\nimport React,{useState ,useEffect} from \"react\";\nimport { Switch ,Route ,Router} from \"react-router-dom\";\nimport Register from './pages/home';\nimport {CONTRACT_ADDRESS,ABI } from \"./config.js\"\n// import getWeb3 from './getWeb3';\nimport Web3 from 'web3'\nimport history from './pages/history';\nimport Patient from './pages/patients_dashboard';\nimport WebPage from './pages/pages.js'\n\nconst web3 = new Web3(Web3.givenProvider)\nconst contract =  new web3.eth.Contract(ABI,CONTRACT_ADDRESS);\n\nfunction App() {\n\n const[currentAccount,setCurrentAccount]= useState('');\n//  const[contract, setContract] = useState({});\n const[patient,setPatient] = useState([]);\n const getWeb3Data = async()=>{\n   try{\n     //obtain web3 from getWeb3\n    //  const web3 = await getWeb3();\n     //obtain the accounts\n     const accounts = await web3.eth.getAccounts();\n     console.log(accounts);\n     //obtain netwrokID\n    //  const netwrokID = await web3.eth.net.getId();\n    //  console.log(netwrokID);\n    //  const networkdeployed = Contract.networks[netwrokID];\n    //  console.log(networkdeployed);\n    //  const contract = await new web3.eth.Contract(ABI,CONTRACT_ADDRESS);\n     setCurrentAccount(accounts[0]);\n    //  setContract({...instance});\n     //Just to confirm working of addPatient and addDoctor function \n    //  const patient = await instance.methods.getPatientDetails(accounts[0]).call();\n    //  console.log(patient);\n    //  const doctor = await instance.methods.getDoctorByAddress(accounts[0]).call();\n    //  console.log(doctor);\n\n\n   }\n   catch(error){\n     alert(\"Cannot load web3 ,contract. Consult console for details\");\n     console.log(error);\n   }\n }\n  //Register Patient\n  const patientRegister = async(name,phone,gender,dob,blood)=>{\n    try{\n      console.log(name,phone,gender,dob,blood);\n      console.log(currentAccount)\n      const gas = await contract.methods.addPatient(name,phone,gender,dob,blood).estimateGas()\n      contract.methods.addPatient(name,phone,gender,dob,blood).send({from:currentAccount, gas});\n    }\n    catch(error){\n      console.log(error);\n    }\n  }\n  //Register/Add Doctor\n  const doctorRegister = async(name,hname,contact,faculty)=>{\n    try{\n      await getWeb3Data();\n      console.log(name,contact,faculty);\n      contract.methods.addDoctor(name,hname,contact,faculty).send({from:currentAccount});\n      \n\n    }\ncatch(error){\n  console.log(error);\n}\n  }\n  //Handle  patient Login\n  const phandlelogin = async()=>{\n    try{\n      console.log(\"sucess\");\n      const patient = await contract.methods.getPatientDetails(currentAccount).call();\n      setPatient(patient);\n      console.log(patient)\n      // if(patient.length!==0){\n        history.push('/patient')\n      // }\n      \n    }\n    catch(error){\n      console.error(error);\n      // alert(error)\n      alert(\"No records found\")\n    }\n  }\n//Patient grant Access to doctor\n  const grantAccess = async(doctor)=>{\n    try{\n       contract.methods.grantAccess(doctor).send({from:currentAccount})\n    }\n    catch(error){\n      console.error(error);\n    }\n  }\n  //Patient revoke access from doctor\n  const revokeAccess = async(doctor)=>{\n    try{\n      contract.methods.revoke_access(doctor).send({from:currentAccount})\n    }\n    catch(error){\n      console.error(error);\n      alert(error);\n    }\n  }\n  //Handle Doctor Login\n  const dhandlelogin = async()=>{\n    try{\n      console.log(\"doctor\");\n    }\n    catch(error){\n      console.log(error);\n    }\n  }\n  useEffect(()=>{\n    getWeb3Data();\n  },[]);\n  return (\n    \n      <div className =\"App\">\n        <Router history={history}>\n        <Switch>\n          <Route path ='/' exact>\n          <Register\n          patientRegister={patientRegister}\n          doctorRegister ={doctorRegister}\n          phandlelogin ={phandlelogin}\n          dhandlelogin ={dhandlelogin}\n          />\n          </Route>\n          <Route path ='/patient'>\n            <Patient\n            patient={patient}\n            grantAccess ={grantAccess}\n            revokeAccess ={revokeAccess}/>\n          </Route>\n          \n          </Switch>\n          </Router>\n          {/* <WebPage /> */}\n  \n      </div>\n    )}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}