{"ast":null,"code":"'use strict';\n\nconst {\n  PBNode\n} = require('./dag');\n\nconst DAGLink = require('./dag-link/dagLink');\n\nconst DAGNode = require('./dag-node/dagNode');\n\nconst {\n  serializeDAGNode,\n  serializeDAGNodeLike\n} = require('./serialize');\n\nconst genCid = require('./genCid');\n/**\n * @typedef {import('./types').DAGLinkLike} DAGLinkLike\n */\n\n/**\n * Calculate the CID of the binary blob\n *\n * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n * @param {import('./genCid').GenCIDOptions} [userOptions] - Options to create the CID\n */\n\n\nconst cid = (binaryBlob, userOptions) => {\n  return genCid.cid(binaryBlob, userOptions);\n};\n/**\n * Serialize internal representation into a binary PB block\n *\n * @param {DAGNode | { Data?: Uint8Array, Links?: (DAGLink | DAGLinkLike)[]}} node\n */\n\n\nconst serialize = node => {\n  if (node instanceof DAGNode) {\n    return serializeDAGNode(node);\n  } else {\n    return serializeDAGNodeLike(node.Data, node.Links);\n  }\n};\n/**\n * Deserialize PB block into the internal representation.\n *\n * @param {Uint8Array} buffer - Binary representation of a PB block\n */\n\n\nconst deserialize = buffer => {\n  const message = PBNode.decode(buffer);\n  const pbn = PBNode.toObject(message, {\n    defaults: false,\n    arrays: true,\n    longs: Number,\n    objects: false\n  });\n  /** @type {DAGLink[]} */\n\n  const links = pbn.Links.map((\n  /** @type {DAGLinkLike} */\n  link) => {\n    // @ts-ignore\n    return new DAGLink(link.Name, link.Tsize, link.Hash);\n  });\n  const data = pbn.Data == null ? new Uint8Array(0) : pbn.Data;\n  return new DAGNode(data, links, buffer.byteLength);\n};\n\nmodule.exports = {\n  codec: genCid.codec,\n  defaultHashAlg: genCid.defaultHashAlg,\n  serialize,\n  deserialize,\n  cid\n};","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/node_modules/ipld-dag-pb/src/util.js"],"names":["PBNode","require","DAGLink","DAGNode","serializeDAGNode","serializeDAGNodeLike","genCid","cid","binaryBlob","userOptions","serialize","node","Data","Links","deserialize","buffer","message","decode","pbn","toObject","defaults","arrays","longs","Number","objects","links","map","link","Name","Tsize","Hash","data","Uint8Array","byteLength","module","exports","codec","defaultHashAlg"],"mappings":"AAAA;;AAEA,MAAM;AACJA,EAAAA;AADI,IAEFC,OAAO,CAAC,OAAD,CAFX;;AAGA,MAAMC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAAvB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAAvB;;AACA,MAAM;AAAEG,EAAAA,gBAAF;AAAoBC,EAAAA;AAApB,IAA6CJ,OAAO,CAAC,aAAD,CAA1D;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,UAAD,CAAtB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,GAAG,GAAG,CAACC,UAAD,EAAaC,WAAb,KAA6B;AACvC,SAAOH,MAAM,CAACC,GAAP,CAAWC,UAAX,EAAuBC,WAAvB,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,SAAS,GAAIC,IAAD,IAAU;AAC1B,MAAIA,IAAI,YAAYR,OAApB,EAA6B;AAC3B,WAAOC,gBAAgB,CAACO,IAAD,CAAvB;AACD,GAFD,MAEO;AACL,WAAON,oBAAoB,CAACM,IAAI,CAACC,IAAN,EAAYD,IAAI,CAACE,KAAjB,CAA3B;AACD;AACF,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,WAAW,GAAIC,MAAD,IAAY;AAC9B,QAAMC,OAAO,GAAGhB,MAAM,CAACiB,MAAP,CAAcF,MAAd,CAAhB;AACA,QAAMG,GAAG,GAAGlB,MAAM,CAACmB,QAAP,CAAgBH,OAAhB,EAAyB;AACnCI,IAAAA,QAAQ,EAAE,KADyB;AAEnCC,IAAAA,MAAM,EAAE,IAF2B;AAGnCC,IAAAA,KAAK,EAAEC,MAH4B;AAInCC,IAAAA,OAAO,EAAE;AAJ0B,GAAzB,CAAZ;AAOA;;AACA,QAAMC,KAAK,GAAGP,GAAG,CAACL,KAAJ,CAAUa,GAAV,CAAc;AAAC;AAA2BC,EAAAA,IAA5B,KAAqC;AAC/D;AACA,WAAO,IAAIzB,OAAJ,CAAYyB,IAAI,CAACC,IAAjB,EAAuBD,IAAI,CAACE,KAA5B,EAAmCF,IAAI,CAACG,IAAxC,CAAP;AACD,GAHa,CAAd;AAKA,QAAMC,IAAI,GAAGb,GAAG,CAACN,IAAJ,IAAY,IAAZ,GAAmB,IAAIoB,UAAJ,CAAe,CAAf,CAAnB,GAAuCd,GAAG,CAACN,IAAxD;AAEA,SAAO,IAAIT,OAAJ,CAAY4B,IAAZ,EAAkBN,KAAlB,EAAyBV,MAAM,CAACkB,UAAhC,CAAP;AACD,CAlBD;;AAoBAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,KAAK,EAAE9B,MAAM,CAAC8B,KADC;AAEfC,EAAAA,cAAc,EAAE/B,MAAM,CAAC+B,cAFR;AAGf3B,EAAAA,SAHe;AAIfI,EAAAA,WAJe;AAKfP,EAAAA;AALe,CAAjB","sourcesContent":["'use strict'\n\nconst {\n  PBNode\n} = require('./dag')\nconst DAGLink = require('./dag-link/dagLink')\nconst DAGNode = require('./dag-node/dagNode')\nconst { serializeDAGNode, serializeDAGNodeLike } = require('./serialize')\nconst genCid = require('./genCid')\n\n/**\n * @typedef {import('./types').DAGLinkLike} DAGLinkLike\n */\n\n/**\n * Calculate the CID of the binary blob\n *\n * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n * @param {import('./genCid').GenCIDOptions} [userOptions] - Options to create the CID\n */\nconst cid = (binaryBlob, userOptions) => {\n  return genCid.cid(binaryBlob, userOptions)\n}\n\n/**\n * Serialize internal representation into a binary PB block\n *\n * @param {DAGNode | { Data?: Uint8Array, Links?: (DAGLink | DAGLinkLike)[]}} node\n */\nconst serialize = (node) => {\n  if (node instanceof DAGNode) {\n    return serializeDAGNode(node)\n  } else {\n    return serializeDAGNodeLike(node.Data, node.Links)\n  }\n}\n\n/**\n * Deserialize PB block into the internal representation.\n *\n * @param {Uint8Array} buffer - Binary representation of a PB block\n */\nconst deserialize = (buffer) => {\n  const message = PBNode.decode(buffer)\n  const pbn = PBNode.toObject(message, {\n    defaults: false,\n    arrays: true,\n    longs: Number,\n    objects: false\n  })\n\n  /** @type {DAGLink[]} */\n  const links = pbn.Links.map((/** @type {DAGLinkLike} */ link) => {\n    // @ts-ignore\n    return new DAGLink(link.Name, link.Tsize, link.Hash)\n  })\n\n  const data = pbn.Data == null ? new Uint8Array(0) : pbn.Data\n\n  return new DAGNode(data, links, buffer.byteLength)\n}\n\nmodule.exports = {\n  codec: genCid.codec,\n  defaultHashAlg: genCid.defaultHashAlg,\n  serialize,\n  deserialize,\n  cid\n}\n"]},"metadata":{},"sourceType":"script"}