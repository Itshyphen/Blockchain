{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multicodec = require('multicodec');\n\nconst multihashing = require('multihashing-async');\n\nconst {\n  multihash\n} = multihashing;\nconst codec = multicodec.DAG_PB;\nconst defaultHashAlg = multihash.names['sha2-256'];\n/**\n * @typedef {object} GenCIDOptions - Options to create the CID\n * @property {CID.CIDVersion} [cidVersion=1] - CID version number\n * @property {multihashing.multihash.HashCode} [hashAlg=multihash.names['sha2-256']] - Defaults to the defaultHashAlg of the format\n */\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n * @param {GenCIDOptions} [userOptions] - Options to create the CID\n */\n\nconst cid = async (binaryBlob, userOptions = {}) => {\n  const options = {\n    cidVersion: userOptions.cidVersion == null ? 1 : userOptions.cidVersion,\n    hashAlg: userOptions.hashAlg == null ? defaultHashAlg : userOptions.hashAlg\n  };\n  const hashName = multihash.codes[options.hashAlg];\n  const hash = await multihashing(binaryBlob, hashName);\n  const codecName = multicodec.getNameFromCode(codec);\n  const cid = new CID(options.cidVersion, codecName, hash);\n  return cid;\n};\n\nmodule.exports = {\n  codec,\n  defaultHashAlg,\n  cid\n};","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/node_modules/ipld-dag-pb/src/genCid.js"],"names":["CID","require","multicodec","multihashing","multihash","codec","DAG_PB","defaultHashAlg","names","cid","binaryBlob","userOptions","options","cidVersion","hashAlg","hashName","codes","hash","codecName","getNameFromCode","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAgBD,YAAtB;AAEA,MAAME,KAAK,GAAGH,UAAU,CAACI,MAAzB;AACA,MAAMC,cAAc,GAAGH,SAAS,CAACI,KAAV,CAAgB,UAAhB,CAAvB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,GAAG,GAAG,OAAOC,UAAP,EAAmBC,WAAW,GAAG,EAAjC,KAAwC;AAClD,QAAMC,OAAO,GAAG;AACdC,IAAAA,UAAU,EAAEF,WAAW,CAACE,UAAZ,IAA0B,IAA1B,GAAiC,CAAjC,GAAqCF,WAAW,CAACE,UAD/C;AAEdC,IAAAA,OAAO,EAAEH,WAAW,CAACG,OAAZ,IAAuB,IAAvB,GAA8BP,cAA9B,GAA+CI,WAAW,CAACG;AAFtD,GAAhB;AAKA,QAAMC,QAAQ,GAAGX,SAAS,CAACY,KAAV,CAAgBJ,OAAO,CAACE,OAAxB,CAAjB;AACA,QAAMG,IAAI,GAAG,MAAMd,YAAY,CAACO,UAAD,EAAaK,QAAb,CAA/B;AACA,QAAMG,SAAS,GAAGhB,UAAU,CAACiB,eAAX,CAA2Bd,KAA3B,CAAlB;AACA,QAAMI,GAAG,GAAG,IAAIT,GAAJ,CAAQY,OAAO,CAACC,UAAhB,EAA4BK,SAA5B,EAAuCD,IAAvC,CAAZ;AAEA,SAAOR,GAAP;AACD,CAZD;;AAcAW,MAAM,CAACC,OAAP,GAAiB;AACfhB,EAAAA,KADe;AAEfE,EAAAA,cAFe;AAGfE,EAAAA;AAHe,CAAjB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\nconst { multihash } = multihashing\n\nconst codec = multicodec.DAG_PB\nconst defaultHashAlg = multihash.names['sha2-256']\n\n/**\n * @typedef {object} GenCIDOptions - Options to create the CID\n * @property {CID.CIDVersion} [cidVersion=1] - CID version number\n * @property {multihashing.multihash.HashCode} [hashAlg=multihash.names['sha2-256']] - Defaults to the defaultHashAlg of the format\n */\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n * @param {GenCIDOptions} [userOptions] - Options to create the CID\n */\nconst cid = async (binaryBlob, userOptions = {}) => {\n  const options = {\n    cidVersion: userOptions.cidVersion == null ? 1 : userOptions.cidVersion,\n    hashAlg: userOptions.hashAlg == null ? defaultHashAlg : userOptions.hashAlg\n  }\n\n  const hashName = multihash.codes[options.hashAlg]\n  const hash = await multihashing(binaryBlob, hashName)\n  const codecName = multicodec.getNameFromCode(codec)\n  const cid = new CID(options.cidVersion, codecName, hash)\n\n  return cid\n}\n\nmodule.exports = {\n  codec,\n  defaultHashAlg,\n  cid\n}\n"]},"metadata":{},"sourceType":"script"}