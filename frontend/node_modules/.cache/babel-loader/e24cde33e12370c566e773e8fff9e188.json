{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.PBLink = function () {\n  /**\n   * Properties of a PBLink.\n   * @exports IPBLink\n   * @interface IPBLink\n   * @property {Uint8Array|null} [Hash] PBLink Hash\n   * @property {string|null} [Name] PBLink Name\n   * @property {number|null} [Tsize] PBLink Tsize\n   */\n\n  /**\n   * Constructs a new PBLink.\n   * @exports PBLink\n   * @classdesc Represents a PBLink.\n   * @implements IPBLink\n   * @constructor\n   * @param {IPBLink=} [p] Properties to set\n   */\n  function PBLink(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * PBLink Hash.\n   * @member {Uint8Array} Hash\n   * @memberof PBLink\n   * @instance\n   */\n\n\n  PBLink.prototype.Hash = $util.newBuffer([]);\n  /**\n   * PBLink Name.\n   * @member {string} Name\n   * @memberof PBLink\n   * @instance\n   */\n\n  PBLink.prototype.Name = \"\";\n  /**\n   * PBLink Tsize.\n   * @member {number} Tsize\n   * @memberof PBLink\n   * @instance\n   */\n\n  PBLink.prototype.Tsize = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Encodes the specified PBLink message. Does not implicitly {@link PBLink.verify|verify} messages.\n   * @function encode\n   * @memberof PBLink\n   * @static\n   * @param {IPBLink} m PBLink message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  PBLink.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.Hash != null && Object.hasOwnProperty.call(m, \"Hash\")) w.uint32(10).bytes(m.Hash);\n    if (m.Name != null && Object.hasOwnProperty.call(m, \"Name\")) w.uint32(18).string(m.Name);\n    if (m.Tsize != null && Object.hasOwnProperty.call(m, \"Tsize\")) w.uint32(24).uint64(m.Tsize);\n    return w;\n  };\n  /**\n   * Decodes a PBLink message from the specified reader or buffer.\n   * @function decode\n   * @memberof PBLink\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {PBLink} PBLink\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  PBLink.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.PBLink();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.Hash = r.bytes();\n          break;\n\n        case 2:\n          m.Name = r.string();\n          break;\n\n        case 3:\n          m.Tsize = r.uint64();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a PBLink message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PBLink\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {PBLink} PBLink\n   */\n\n\n  PBLink.fromObject = function fromObject(d) {\n    if (d instanceof $root.PBLink) return d;\n    var m = new $root.PBLink();\n\n    if (d.Hash != null) {\n      if (typeof d.Hash === \"string\") $util.base64.decode(d.Hash, m.Hash = $util.newBuffer($util.base64.length(d.Hash)), 0);else if (d.Hash.length) m.Hash = d.Hash;\n    }\n\n    if (d.Name != null) {\n      m.Name = String(d.Name);\n    }\n\n    if (d.Tsize != null) {\n      if ($util.Long) (m.Tsize = $util.Long.fromValue(d.Tsize)).unsigned = true;else if (typeof d.Tsize === \"string\") m.Tsize = parseInt(d.Tsize, 10);else if (typeof d.Tsize === \"number\") m.Tsize = d.Tsize;else if (typeof d.Tsize === \"object\") m.Tsize = new $util.LongBits(d.Tsize.low >>> 0, d.Tsize.high >>> 0).toNumber(true);\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a PBLink message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PBLink\n   * @static\n   * @param {PBLink} m PBLink\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  PBLink.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      if (o.bytes === String) d.Hash = \"\";else {\n        d.Hash = [];\n        if (o.bytes !== Array) d.Hash = $util.newBuffer(d.Hash);\n      }\n      d.Name = \"\";\n\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.Tsize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.Tsize = o.longs === String ? \"0\" : 0;\n    }\n\n    if (m.Hash != null && m.hasOwnProperty(\"Hash\")) {\n      d.Hash = o.bytes === String ? $util.base64.encode(m.Hash, 0, m.Hash.length) : o.bytes === Array ? Array.prototype.slice.call(m.Hash) : m.Hash;\n    }\n\n    if (m.Name != null && m.hasOwnProperty(\"Name\")) {\n      d.Name = m.Name;\n    }\n\n    if (m.Tsize != null && m.hasOwnProperty(\"Tsize\")) {\n      if (typeof m.Tsize === \"number\") d.Tsize = o.longs === String ? String(m.Tsize) : m.Tsize;else d.Tsize = o.longs === String ? $util.Long.prototype.toString.call(m.Tsize) : o.longs === Number ? new $util.LongBits(m.Tsize.low >>> 0, m.Tsize.high >>> 0).toNumber(true) : m.Tsize;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this PBLink to JSON.\n   * @function toJSON\n   * @memberof PBLink\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  PBLink.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return PBLink;\n}();\n\n$root.PBNode = function () {\n  /**\n   * Properties of a PBNode.\n   * @exports IPBNode\n   * @interface IPBNode\n   * @property {Array.<IPBLink>|null} [Links] PBNode Links\n   * @property {Uint8Array|null} [Data] PBNode Data\n   */\n\n  /**\n   * Constructs a new PBNode.\n   * @exports PBNode\n   * @classdesc Represents a PBNode.\n   * @implements IPBNode\n   * @constructor\n   * @param {IPBNode=} [p] Properties to set\n   */\n  function PBNode(p) {\n    this.Links = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * PBNode Links.\n   * @member {Array.<IPBLink>} Links\n   * @memberof PBNode\n   * @instance\n   */\n\n\n  PBNode.prototype.Links = $util.emptyArray;\n  /**\n   * PBNode Data.\n   * @member {Uint8Array} Data\n   * @memberof PBNode\n   * @instance\n   */\n\n  PBNode.prototype.Data = $util.newBuffer([]);\n  /**\n   * Encodes the specified PBNode message. Does not implicitly {@link PBNode.verify|verify} messages.\n   * @function encode\n   * @memberof PBNode\n   * @static\n   * @param {IPBNode} m PBNode message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  PBNode.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\")) w.uint32(10).bytes(m.Data);\n\n    if (m.Links != null && m.Links.length) {\n      for (var i = 0; i < m.Links.length; ++i) $root.PBLink.encode(m.Links[i], w.uint32(18).fork()).ldelim();\n    }\n\n    return w;\n  };\n  /**\n   * Decodes a PBNode message from the specified reader or buffer.\n   * @function decode\n   * @memberof PBNode\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {PBNode} PBNode\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  PBNode.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.PBNode();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 2:\n          if (!(m.Links && m.Links.length)) m.Links = [];\n          m.Links.push($root.PBLink.decode(r, r.uint32()));\n          break;\n\n        case 1:\n          m.Data = r.bytes();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a PBNode message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PBNode\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {PBNode} PBNode\n   */\n\n\n  PBNode.fromObject = function fromObject(d) {\n    if (d instanceof $root.PBNode) return d;\n    var m = new $root.PBNode();\n\n    if (d.Links) {\n      if (!Array.isArray(d.Links)) throw TypeError(\".PBNode.Links: array expected\");\n      m.Links = [];\n\n      for (var i = 0; i < d.Links.length; ++i) {\n        if (typeof d.Links[i] !== \"object\") throw TypeError(\".PBNode.Links: object expected\");\n        m.Links[i] = $root.PBLink.fromObject(d.Links[i]);\n      }\n    }\n\n    if (d.Data != null) {\n      if (typeof d.Data === \"string\") $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);else if (d.Data.length) m.Data = d.Data;\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a PBNode message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PBNode\n   * @static\n   * @param {PBNode} m PBNode\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  PBNode.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.arrays || o.defaults) {\n      d.Links = [];\n    }\n\n    if (o.defaults) {\n      if (o.bytes === String) d.Data = \"\";else {\n        d.Data = [];\n        if (o.bytes !== Array) d.Data = $util.newBuffer(d.Data);\n      }\n    }\n\n    if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n      d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n    }\n\n    if (m.Links && m.Links.length) {\n      d.Links = [];\n\n      for (var j = 0; j < m.Links.length; ++j) {\n        d.Links[j] = $root.PBLink.toObject(m.Links[j], o);\n      }\n    }\n\n    return d;\n  };\n  /**\n   * Converts this PBNode to JSON.\n   * @function toJSON\n   * @memberof PBNode\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  PBNode.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return PBNode;\n}();\n\nmodule.exports = $root;","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/node_modules/ipld-dag-pb/src/dag.js"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","PBLink","p","ks","Object","keys","i","length","prototype","Hash","newBuffer","Name","Tsize","Long","fromBits","encode","m","w","create","hasOwnProperty","call","uint32","bytes","string","uint64","decode","r","l","c","undefined","len","pos","t","skipType","fromObject","d","base64","String","fromValue","unsigned","parseInt","LongBits","low","high","toNumber","toObject","o","defaults","Array","n","longs","toString","Number","slice","toJSON","constructor","toJSONOptions","PBNode","Links","emptyArray","Data","fork","ldelim","push","isArray","TypeError","arrays","j","module","exports"],"mappings":"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","sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.PBLink = (function() {\n\n    /**\n     * Properties of a PBLink.\n     * @exports IPBLink\n     * @interface IPBLink\n     * @property {Uint8Array|null} [Hash] PBLink Hash\n     * @property {string|null} [Name] PBLink Name\n     * @property {number|null} [Tsize] PBLink Tsize\n     */\n\n    /**\n     * Constructs a new PBLink.\n     * @exports PBLink\n     * @classdesc Represents a PBLink.\n     * @implements IPBLink\n     * @constructor\n     * @param {IPBLink=} [p] Properties to set\n     */\n    function PBLink(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * PBLink Hash.\n     * @member {Uint8Array} Hash\n     * @memberof PBLink\n     * @instance\n     */\n    PBLink.prototype.Hash = $util.newBuffer([]);\n\n    /**\n     * PBLink Name.\n     * @member {string} Name\n     * @memberof PBLink\n     * @instance\n     */\n    PBLink.prototype.Name = \"\";\n\n    /**\n     * PBLink Tsize.\n     * @member {number} Tsize\n     * @memberof PBLink\n     * @instance\n     */\n    PBLink.prototype.Tsize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Encodes the specified PBLink message. Does not implicitly {@link PBLink.verify|verify} messages.\n     * @function encode\n     * @memberof PBLink\n     * @static\n     * @param {IPBLink} m PBLink message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PBLink.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.Hash != null && Object.hasOwnProperty.call(m, \"Hash\"))\n            w.uint32(10).bytes(m.Hash);\n        if (m.Name != null && Object.hasOwnProperty.call(m, \"Name\"))\n            w.uint32(18).string(m.Name);\n        if (m.Tsize != null && Object.hasOwnProperty.call(m, \"Tsize\"))\n            w.uint32(24).uint64(m.Tsize);\n        return w;\n    };\n\n    /**\n     * Decodes a PBLink message from the specified reader or buffer.\n     * @function decode\n     * @memberof PBLink\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {PBLink} PBLink\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PBLink.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.PBLink();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Hash = r.bytes();\n                break;\n            case 2:\n                m.Name = r.string();\n                break;\n            case 3:\n                m.Tsize = r.uint64();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a PBLink message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PBLink\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {PBLink} PBLink\n     */\n    PBLink.fromObject = function fromObject(d) {\n        if (d instanceof $root.PBLink)\n            return d;\n        var m = new $root.PBLink();\n        if (d.Hash != null) {\n            if (typeof d.Hash === \"string\")\n                $util.base64.decode(d.Hash, m.Hash = $util.newBuffer($util.base64.length(d.Hash)), 0);\n            else if (d.Hash.length)\n                m.Hash = d.Hash;\n        }\n        if (d.Name != null) {\n            m.Name = String(d.Name);\n        }\n        if (d.Tsize != null) {\n            if ($util.Long)\n                (m.Tsize = $util.Long.fromValue(d.Tsize)).unsigned = true;\n            else if (typeof d.Tsize === \"string\")\n                m.Tsize = parseInt(d.Tsize, 10);\n            else if (typeof d.Tsize === \"number\")\n                m.Tsize = d.Tsize;\n            else if (typeof d.Tsize === \"object\")\n                m.Tsize = new $util.LongBits(d.Tsize.low >>> 0, d.Tsize.high >>> 0).toNumber(true);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a PBLink message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PBLink\n     * @static\n     * @param {PBLink} m PBLink\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PBLink.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.Hash = \"\";\n            else {\n                d.Hash = [];\n                if (o.bytes !== Array)\n                    d.Hash = $util.newBuffer(d.Hash);\n            }\n            d.Name = \"\";\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.Tsize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.Tsize = o.longs === String ? \"0\" : 0;\n        }\n        if (m.Hash != null && m.hasOwnProperty(\"Hash\")) {\n            d.Hash = o.bytes === String ? $util.base64.encode(m.Hash, 0, m.Hash.length) : o.bytes === Array ? Array.prototype.slice.call(m.Hash) : m.Hash;\n        }\n        if (m.Name != null && m.hasOwnProperty(\"Name\")) {\n            d.Name = m.Name;\n        }\n        if (m.Tsize != null && m.hasOwnProperty(\"Tsize\")) {\n            if (typeof m.Tsize === \"number\")\n                d.Tsize = o.longs === String ? String(m.Tsize) : m.Tsize;\n            else\n                d.Tsize = o.longs === String ? $util.Long.prototype.toString.call(m.Tsize) : o.longs === Number ? new $util.LongBits(m.Tsize.low >>> 0, m.Tsize.high >>> 0).toNumber(true) : m.Tsize;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this PBLink to JSON.\n     * @function toJSON\n     * @memberof PBLink\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PBLink.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PBLink;\n})();\n\n$root.PBNode = (function() {\n\n    /**\n     * Properties of a PBNode.\n     * @exports IPBNode\n     * @interface IPBNode\n     * @property {Array.<IPBLink>|null} [Links] PBNode Links\n     * @property {Uint8Array|null} [Data] PBNode Data\n     */\n\n    /**\n     * Constructs a new PBNode.\n     * @exports PBNode\n     * @classdesc Represents a PBNode.\n     * @implements IPBNode\n     * @constructor\n     * @param {IPBNode=} [p] Properties to set\n     */\n    function PBNode(p) {\n        this.Links = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * PBNode Links.\n     * @member {Array.<IPBLink>} Links\n     * @memberof PBNode\n     * @instance\n     */\n    PBNode.prototype.Links = $util.emptyArray;\n\n    /**\n     * PBNode Data.\n     * @member {Uint8Array} Data\n     * @memberof PBNode\n     * @instance\n     */\n    PBNode.prototype.Data = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified PBNode message. Does not implicitly {@link PBNode.verify|verify} messages.\n     * @function encode\n     * @memberof PBNode\n     * @static\n     * @param {IPBNode} m PBNode message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PBNode.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\"))\n            w.uint32(10).bytes(m.Data);\n        if (m.Links != null && m.Links.length) {\n            for (var i = 0; i < m.Links.length; ++i)\n                $root.PBLink.encode(m.Links[i], w.uint32(18).fork()).ldelim();\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a PBNode message from the specified reader or buffer.\n     * @function decode\n     * @memberof PBNode\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {PBNode} PBNode\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PBNode.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.PBNode();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 2:\n                if (!(m.Links && m.Links.length))\n                    m.Links = [];\n                m.Links.push($root.PBLink.decode(r, r.uint32()));\n                break;\n            case 1:\n                m.Data = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a PBNode message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PBNode\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {PBNode} PBNode\n     */\n    PBNode.fromObject = function fromObject(d) {\n        if (d instanceof $root.PBNode)\n            return d;\n        var m = new $root.PBNode();\n        if (d.Links) {\n            if (!Array.isArray(d.Links))\n                throw TypeError(\".PBNode.Links: array expected\");\n            m.Links = [];\n            for (var i = 0; i < d.Links.length; ++i) {\n                if (typeof d.Links[i] !== \"object\")\n                    throw TypeError(\".PBNode.Links: object expected\");\n                m.Links[i] = $root.PBLink.fromObject(d.Links[i]);\n            }\n        }\n        if (d.Data != null) {\n            if (typeof d.Data === \"string\")\n                $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);\n            else if (d.Data.length)\n                m.Data = d.Data;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a PBNode message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PBNode\n     * @static\n     * @param {PBNode} m PBNode\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PBNode.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.Links = [];\n        }\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.Data = \"\";\n            else {\n                d.Data = [];\n                if (o.bytes !== Array)\n                    d.Data = $util.newBuffer(d.Data);\n            }\n        }\n        if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n            d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n        }\n        if (m.Links && m.Links.length) {\n            d.Links = [];\n            for (var j = 0; j < m.Links.length; ++j) {\n                d.Links[j] = $root.PBLink.toObject(m.Links[j], o);\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this PBNode to JSON.\n     * @function toJSON\n     * @memberof PBNode\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PBNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PBNode;\n})();\n\nmodule.exports = $root;\n"]},"metadata":{},"sourceType":"script"}