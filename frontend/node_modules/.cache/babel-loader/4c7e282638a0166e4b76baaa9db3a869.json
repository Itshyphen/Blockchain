{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function* put(key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n    const res = await api.post('dht/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      ...(await multipartRequest(value, controller, options.headers))\n    });\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n      message.id = new CID(message.id);\n\n      if (message.responses) {\n        message.responses = message.responses.map((\n        /** @type {{ ID: string, Addrs: string[] }} */\n        {\n          ID,\n          Addrs\n        }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => new Multiaddr(a))\n        }));\n      }\n\n      yield message;\n    }\n  }\n\n  return put;\n});","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/src/dht/put.js"],"names":["CID","require","Multiaddr","toCamel","configure","toUrlSearchParams","multipartRequest","abortSignal","AbortController","module","exports","api","put","key","value","options","controller","signal","res","post","timeout","searchParams","arg","headers","message","ndjson","id","responses","map","ID","Addrs","addrs","a"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMM,WAAW,GAAGN,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;AAAEO,EAAAA;AAAF,IAAsBP,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;;;AAEAQ,MAAM,CAACC,OAAP,GAAiBN,SAAS,CAACO,GAAG,IAAI;AAChC;AACF;AACA;AACE,kBAAiBC,GAAjB,CAAsBC,GAAtB,EAA2BC,KAA3B,EAAkCC,OAAO,GAAG,EAA5C,EAAgD;AAC9C;AACA,UAAMC,UAAU,GAAG,IAAIR,eAAJ,EAAnB;AACA,UAAMS,MAAM,GAAGV,WAAW,CAACS,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B,CAH8C,CAK9C;;AACA,UAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAJ,CAAS,SAAT,EAAoB;AACpCC,MAAAA,OAAO,EAAEL,OAAO,CAACK,OADmB;AAEpCH,MAAAA,MAFoC;AAGpCI,MAAAA,YAAY,EAAEhB,iBAAiB,CAAC;AAC9BiB,QAAAA,GAAG,EAAET,GADyB;AAE9B,WAAGE;AAF2B,OAAD,CAHK;AAOpC,UACE,MAAMT,gBAAgB,CAACQ,KAAD,EAAQE,UAAR,EAAoBD,OAAO,CAACQ,OAA5B,CADxB;AAPoC,KAApB,CAAlB;;AAYA,eAAW,IAAIC,OAAf,IAA0BN,GAAG,CAACO,MAAJ,EAA1B,EAAwC;AACtCD,MAAAA,OAAO,GAAGrB,OAAO,CAACqB,OAAD,CAAjB;AACAA,MAAAA,OAAO,CAACE,EAAR,GAAa,IAAI1B,GAAJ,CAAQwB,OAAO,CAACE,EAAhB,CAAb;;AACA,UAAIF,OAAO,CAACG,SAAZ,EAAuB;AACrBH,QAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB;AAAC;AAA+C;AAAEC,UAAAA,EAAF;AAAMC,UAAAA;AAAN,SAAhD,MAAmE;AAC3GJ,UAAAA,EAAE,EAAEG,EADuG;AAE3GE,UAAAA,KAAK,EAAE,CAACD,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkBI,CAAC,IAAI,IAAI9B,SAAJ,CAAc8B,CAAd,CAAvB;AAFoG,SAAnE,CAAtB,CAApB;AAID;;AACD,YAAMR,OAAN;AACD;AACF;;AAED,SAAOZ,GAAP;AACD,CApCyB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('dht/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      ...(\n        await multipartRequest(value, controller, options.headers)\n      )\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => new Multiaddr(a))\n        }))\n      }\n      yield message\n    }\n  }\n\n  return put\n})\n"]},"metadata":{},"sourceType":"script"}