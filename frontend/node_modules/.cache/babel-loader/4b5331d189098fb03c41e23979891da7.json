{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst raw = require('ipld-raw');\n\nconst multicodec = require('multicodec');\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('interface-ipld-format').Format<any>} IPLDFormat\n * @typedef {import('multicodec').CodecName} CodecName\n * @typedef {import('../types').LoadFormatFn} LoadFormatFn\n */\n\n/**\n * @type {LoadFormatFn}\n */\n\n\nconst noop = codec => {\n  return Promise.reject(new Error(`Missing IPLD format \"${codec}\"`));\n};\n/**\n * Return an object containing supported IPLD Formats\n *\n * @param {object} [options] - IPLD options passed to the http client constructor\n * @param {IPLDFormat[]} [options.formats] - A list of IPLD Formats to use\n * @param {LoadFormatFn} [options.loadFormat] - An async function that can load a format when passed a codec name\n */\n\n\nmodule.exports = ({\n  formats = [],\n  loadFormat = noop\n} = {}) => {\n  formats = formats || [];\n  loadFormat = loadFormat || noop;\n  const configuredFormats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: raw\n  };\n  formats.forEach(format => {\n    configuredFormats[format.codec] = format;\n  });\n  /**\n   * Attempts to load an IPLD format for the passed CID\n   *\n   * @param {CodecName} codec - The code to load the format for\n   */\n\n  const loadResolver = async codec => {\n    const number = multicodec.getCodeFromName(codec);\n    const format = configuredFormats[number] || (await loadFormat(codec));\n\n    if (!format) {\n      throw Object.assign(new Error(`Missing IPLD format \"${codec}\"`), {\n        missingMulticodec: codec\n      });\n    }\n\n    return format;\n  };\n\n  return loadResolver;\n};","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/src/lib/ipld-formats.js"],"names":["dagPB","require","dagCBOR","raw","multicodec","noop","codec","Promise","reject","Error","module","exports","formats","loadFormat","configuredFormats","DAG_PB","DAG_CBOR","RAW","forEach","format","loadResolver","number","getCodeFromName","Object","assign","missingMulticodec"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,YAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMI,IAAI,GAAIC,KAAD,IAAW;AACtB,SAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAW,wBAAuBH,KAAM,GAAxC,CAAf,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,OAAO,GAAG,EAAZ;AAAgBC,EAAAA,UAAU,GAAGR;AAA7B,IAAsC,EAAvC,KAA8C;AAC7DO,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,EAAAA,UAAU,GAAGA,UAAU,IAAIR,IAA3B;AAEA,QAAMS,iBAAiB,GAAG;AACxB,KAACV,UAAU,CAACW,MAAZ,GAAqBf,KADG;AAExB,KAACI,UAAU,CAACY,QAAZ,GAAuBd,OAFC;AAGxB,KAACE,UAAU,CAACa,GAAZ,GAAkBd;AAHM,GAA1B;AAMAS,EAAAA,OAAO,CAACM,OAAR,CAAgBC,MAAM,IAAI;AACxBL,IAAAA,iBAAiB,CAACK,MAAM,CAACb,KAAR,CAAjB,GAAkCa,MAAlC;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;;AACE,QAAMC,YAAY,GAAG,MAAOd,KAAP,IAAiB;AACpC,UAAMe,MAAM,GAAGjB,UAAU,CAACkB,eAAX,CAA2BhB,KAA3B,CAAf;AACA,UAAMa,MAAM,GAAGL,iBAAiB,CAACO,MAAD,CAAjB,KAA6B,MAAMR,UAAU,CAACP,KAAD,CAA7C,CAAf;;AAEA,QAAI,CAACa,MAAL,EAAa;AACX,YAAMI,MAAM,CAACC,MAAP,CACJ,IAAIf,KAAJ,CAAW,wBAAuBH,KAAM,GAAxC,CADI,EAEJ;AAAEmB,QAAAA,iBAAiB,EAAEnB;AAArB,OAFI,CAAN;AAID;;AAED,WAAOa,MAAP;AACD,GAZD;;AAcA,SAAOC,YAAP;AACD,CAlCD","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst raw = require('ipld-raw')\nconst multicodec = require('multicodec')\n\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('interface-ipld-format').Format<any>} IPLDFormat\n * @typedef {import('multicodec').CodecName} CodecName\n * @typedef {import('../types').LoadFormatFn} LoadFormatFn\n */\n\n/**\n * @type {LoadFormatFn}\n */\nconst noop = (codec) => {\n  return Promise.reject(new Error(`Missing IPLD format \"${codec}\"`))\n}\n\n/**\n * Return an object containing supported IPLD Formats\n *\n * @param {object} [options] - IPLD options passed to the http client constructor\n * @param {IPLDFormat[]} [options.formats] - A list of IPLD Formats to use\n * @param {LoadFormatFn} [options.loadFormat] - An async function that can load a format when passed a codec name\n */\nmodule.exports = ({ formats = [], loadFormat = noop } = {}) => {\n  formats = formats || []\n  loadFormat = loadFormat || noop\n\n  const configuredFormats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: raw\n  }\n\n  formats.forEach(format => {\n    configuredFormats[format.codec] = format\n  })\n\n  /**\n   * Attempts to load an IPLD format for the passed CID\n   *\n   * @param {CodecName} codec - The code to load the format for\n   */\n  const loadResolver = async (codec) => {\n    const number = multicodec.getCodeFromName(codec)\n    const format = configuredFormats[number] || await loadFormat(codec)\n\n    if (!format) {\n      throw Object.assign(\n        new Error(`Missing IPLD format \"${codec}\"`),\n        { missingMulticodec: codec }\n      )\n    }\n\n    return format\n  }\n\n  return loadResolver\n}\n"]},"metadata":{},"sourceType":"script"}