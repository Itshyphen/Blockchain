{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat(path, options = {}) {\n    if (path && !CID.isCID(path) && typeof path !== 'string') {\n      options = path || {};\n      path = '/';\n    }\n\n    const res = await api.post('files/stat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    data.WithLocality = data.WithLocality || false;\n    return toCoreInterface(toCamelWithMetadata(data));\n  }\n\n  return stat;\n});\n/**\n * @param {*} entry\n */\n\nfunction toCoreInterface(entry) {\n  entry.cid = new CID(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":{"version":3,"sources":["/home/ranju/location/meDossier/frontend/node_modules/ipfs-http-client/src/files/stat.js"],"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","stat","path","options","isCID","res","post","timeout","signal","searchParams","arg","headers","data","json","WithLocality","toCoreInterface","entry","cid","hash"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAD,CAAnC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,IAAf,CAAqBC,IAArB,EAA2BC,OAAO,GAAG,EAArC,EAAyC;AACvC,QAAID,IAAI,IAAI,CAACT,GAAG,CAACW,KAAJ,CAAUF,IAAV,CAAT,IAA4B,OAAOA,IAAP,KAAgB,QAAhD,EAA0D;AACxDC,MAAAA,OAAO,GAAGD,IAAI,IAAI,EAAlB;AACAA,MAAAA,IAAI,GAAG,GAAP;AACD;;AAED,UAAMG,GAAG,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,YAAT,EAAuB;AACvCC,MAAAA,OAAO,EAAEJ,OAAO,CAACI,OADsB;AAEvCC,MAAAA,MAAM,EAAEL,OAAO,CAACK,MAFuB;AAGvCC,MAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9Ba,QAAAA,GAAG,EAAER,IADyB;AAE9B,WAAGC;AAF2B,OAAD,CAHQ;AAOvCQ,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAPsB,KAAvB,CAAlB;AASA,UAAMC,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAnB;AAEAD,IAAAA,IAAI,CAACE,YAAL,GAAoBF,IAAI,CAACE,YAAL,IAAqB,KAAzC;AACA,WAAOC,eAAe,CAACpB,mBAAmB,CAACiB,IAAD,CAApB,CAAtB;AACD;;AACD,SAAOX,IAAP;AACD,CAzByB,CAA1B;AA2BA;AACA;AACA;;AACA,SAASc,eAAT,CAA0BC,KAA1B,EAAiC;AAC/BA,EAAAA,KAAK,CAACC,GAAN,GAAY,IAAIxB,GAAJ,CAAQuB,KAAK,CAACE,IAAd,CAAZ;AACA,SAAOF,KAAK,CAACE,IAAb;AACA,SAAOF,KAAP;AACD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat (path, options = {}) {\n    if (path && !CID.isCID(path) && typeof path !== 'string') {\n      options = path || {}\n      path = '/'\n    }\n\n    const res = await api.post('files/stat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(toCamelWithMetadata(data))\n  }\n  return stat\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  entry.cid = new CID(entry.hash)\n  delete entry.hash\n  return entry\n}\n"]},"metadata":{},"sourceType":"script"}